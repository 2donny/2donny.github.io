{"version":3,"sources":["../node_modules/@material-ui/core/esm/styles/makeStyles.js","components/universitySwitcher.js","components/UI/validationButton.js","pages/Login.js"],"names":["makeStyles","stylesOrCreator","options","arguments","length","undefined","makeStylesWithoutDefault","_extends","defaultTheme","universitySwitcher","universityEng","useStyles","theme","root","margin","spacing","ValidationTextFields","isSent","classes","useState","email","setEmail","dispatch","useDispatch","isLoading","useSelector","store","auth","loading","emailRegex","textChangeHandler","useCallback","event","preventDefault","target","value","submitHandler","match","alert","index","indexOf","univ","slice","univKor","actions","className","noValidate","autoComplete","TextField","error","id","label","helperText","autoFocus","required","fullWidth","variant","onChange","e","style","height","left","color","red","green","blue","alpha","segmentWidth","onClick","Login","history","isEmailSent","emailId","description","fontSize","textAlign","sendAgain","headerNone","footerNone","borderBottom","goBack","width","cursor","src","alt","padding","marginBottom","push"],"mappings":"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","file":"static/js/6.f934206e.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","\nfunction universitySwitcher({ universityEng }){\n    switch(universityEng) {\n        case 'korea.ac.kr':\n            return \"고려대학교\"\n        case 'yonsei.ac.kr':\n            return \"연세대학교\"\n        case 'snu.ac.kr':\n            return \"서울대학교\"\n        case 'sogang.ac.kr':\n            return \"서강대학교\"\n        case 'skky.ac.kr':\n            return \"성균관대학교\"\n        case 'hanyang.ac.kr':\n            return \"한양대학교\"\n        default:\n            return null\n    }\n}\n\nexport default universitySwitcher;","import React, { useCallback, useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LoadingIndicator from 'react-loading-indicator';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport universitySwitcher from '../universitySwitcher';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function ValidationTextFields({ isSent }) {\n  const classes = useStyles();\n  const [email, setEmail] = useState('');\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(store => store.auth.loading);\n\n  const emailRegex = /^[a-zA-Z0-9]([-_]?[a-zA-Z0-9])*@(korea.ac.kr|yonsei.ac.kr|snu.ac.kr|sogang.ac.kr|skky.edu|hanyang.ac.kr)$/;\n\n  const textChangeHandler = useCallback((event) => {\n    event.preventDefault();\n    setEmail(event.target.value);\n  }, []);\n\n  const submitHandler = useCallback((event) => {\n    event.preventDefault();\n    if(!email.match(emailRegex)) { // 먼저 필터링\n      event.preventDefault();\n      return alert('올바른 메일로 입력해주세요.');\n    }\n    const index = email.indexOf('@');\n    const univ = email.slice(index+1); // 영어\n    const univKor = universitySwitcher(univ); //한국말\n\n    // redux 스토어에 dispatch\n    dispatch(actions.auth(email, univKor));\n  }, [email]);\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <div className=\"w-full text-center mt-5\">\n        <TextField\n          error={!email.match(emailRegex)}\n          id=\"outlined-error-helper-text\"\n          label=\"학교 이메일 인증하기\"\n          helperText={!email.match(emailRegex) ? \"이메일을 올바르게 입력해주세요.\" : \"\"}\n          autoFocus\n          required\n          fullWidth={true}\n          variant=\"outlined\"\n          onChange={(e) => textChangeHandler(e)}\n        />\n      </div>\n      {isLoading ? (\n      <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n        <LoadingIndicator \n            color={{red: 0, green: 0, blue: 0, alpha: 1}}\n            segmentWidth={2}\n        />\n      </div>\n      ) : null}\n      <button onClick={(e) => submitHandler(e)} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-10 bg-black text-white hover:bg-gray-400 focus:outline-none\">\n        인증메일 전송\n      </button>\n    </form>\n  )\n}\n","import React, { useCallback }  from 'react';\nimport Layout from '../components/layout';\nimport ValidationButton from '../components/UI/validationButton';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../store/actions/index';\nimport LoadingIndicator from 'react-loading-indicator';\n\nconst Login = ({ history }) => {\n    const isLoading = useSelector(store => store.auth.loading);\n    const isEmailSent = useSelector(store => store.auth.isEmailSent); //만약 토큰이 있으면 AUTH_SUCCESS 이므로\n    const emailId = useSelector(store => store.auth.emailId); //만약 토큰이 있으면 AUTH_SUCCESS 이므로\n    const dispatch = useDispatch();\n\n    let description = null;\n    if(isLoading === false) { //메일이 보내진거임. null에서 false 됐으니까\n        description = (\n            <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto'}}>\n                <strong style={{color: \"#4A87FF\"}}>{emailId}</strong> 메일로 전송되었습니다. 인증메일을 확인바랍니다. 인증 메일을 확인하시고 돌아오셔서 아래의 버튼을 눌러주세요!\n            </p>\n        )\n    }else {\n        description = (\n            <p style={{fontSize: '14px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto'}}>\n                이메일을 인증해주세요. <br/>연고링은 베타테스트단계로  <br/>서울대 고려대 연세대 서강대 한양대 성균관대 <br/> 학생들로만 진행중입니다. \n            </p>\n        )\n    }\n    \n    const sendAgain = useCallback((event) => {\n        event.preventDefault();\n        dispatch(actions.auth(emailId));\n    }, [emailId]);\n\n    return (\n        <Layout headerNone footerNone={true}>\n            <nav style={{height: '60px', borderBottom: '1px solid #eee'}} className=\"flex flex-row items-center justify-between \">\n                <img\n                    onClick={() => history.goBack()} \n                    style={{width: '25px', height: '25px', cursor: 'pointer'}}\n                    src=\"/arrow-back-outline.svg\"\n                    alt=\"back\"\n                />\n            </nav>\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">이메일 인증</h1>\n                    {description}\n                </section>\n                <section className=\"px-10 mb-5\">\n                    {isEmailSent ? (\n                        <>\n                            {isLoading ? (\n                            <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n                                <LoadingIndicator \n                                    color={{red: 0, green: 0, blue: 0, alpha: 1}}\n                                    segmentWidth={2}\n                                />\n                            </div>\n                            ) : null}\n                            <button onClick={() => history.push('/setting/1')} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-10 bg-black text-white  focus:outline-none\">\n                                인증했다면 시작하기!\n                            </button>\n                            <button onClick={(e) => sendAgain(e)} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-3 bg-white text-black hover:bg-black hover:text-white focus:outline-none\">\n                                인증메일 재전송\n                            </button>\n                        </>\n                    ) : (\n                        <ValidationButton isSent={!isLoading}/>\n                    )}\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default Login;\n\n\n"],"sourceRoot":""}