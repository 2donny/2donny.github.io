{"version":3,"sources":["pages/Auth/Start.js","axios-instance.js","store/actions/Auth.js","store/actions/User.js"],"names":["Login","history","useState","displayNameDescription","setDisplayNameDescription","passwordDescription","setPasswordNameDescription","phoneNumberDescription","setPhoneNumberNameDescription","isBtnDisabled","setIsBtnDisabled","displayNameChangeHandler","useSelector","store","auth","loading","isConfirmed","useDispatch","useCallback","event","preventDefault","displayNameText","target","value","match","length","passwordChangeHandler","console","log","passwordText","phoneNumberChangeHandler","loginSubmitHandler","e","push","headerNone","footerNone","style","height","className","padding","textAlign","marginBottom","fontSize","color","margin","whiteSpace","onSubmit","autoComplete","noValidate","type","placeholder","autoFocus","onChange","disabled","onClick","width","Axios","axios","create","baseURL","authFail","actionTypes","email","univKor","dispatch","authData","post","then","res","data","success","univ","authSuccess","code","errorMsg","message","window","location","assign","alert","catch","err","addIsPublic","isPublic","addIsGraduate","isGraduate","addGender","gender","addAge","age","addJob","job","addAdj","adj","addLocation","submitArticleImgToAWSFail","submitImgToAWSInit","submitArticleImgToAWS","articleImg_formData","imgAwsUrl","submitArticleImgToAWSSuccess","addArticleText","articleText","addArticleTag","articleTag","addInterest","interestArr","displayNameInit","addIntroText","introText","submitProfileImgToAWSFail","submitProfileImgToAWS","profileImg_formData","isSuccess","submitProfileImgToAWSSuccess","submitToServerFail","submitToServer","phoneNumberInRedux","isPublicInRedux","isGraduateInRedux","emailInRedux","genderInRedux","ageInRedux","jobInRedux","adjInRedux","locationInRedux","articleImgSrcInRedux","articleTextInRedux","articleTagInRedux","displayNameInRedux","interestArrInRedux","introTextInRedux","profileImgSrcInRedux","resumeText","workPlaceText","userData","phoneNumber","articleImgSrc","displayName","profileImgSrc","resume","workPlace","updateProfileImgToServer","updatedProfileImg","updateProfileImg"],"mappings":"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","file":"static/js/13.2df5aaa2.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState }  from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/layout';\nimport * as actions from '../../store/actions/index';\nimport LoadingIndicator from 'react-loading-indicator';\n\nconst Login = ({ history }) => {\n    const [displayNameDescription, setDisplayNameDescription] = useState(null);\n    const [passwordDescription, setPasswordNameDescription] = useState(null);\n    const [phoneNumberDescription, setPhoneNumberNameDescription] = useState(null);\n    const [isBtnDisabled, setIsBtnDisabled] = useState(true);\n\n    const isLoading = useSelector(store => store.auth.loading);\n    const isConfirmed = useSelector(store => store.auth.isConfirmed);\n    \n    // const displayRef = useRef();\n    // const displayNameCheeckLoading = useSelector(store => store.user.displayNameUI.loading);\n    // const displayNameError = useSelector(store => store.user.displayNameUI.error);\n\n    const dispatch = useDispatch();\n\n    const displayNameChangeHandler = useCallback((event) => {\n        event.preventDefault();\n        const displayNameText = event.target.value;\n        const displayNameRegex = /^@/;\n        if(!displayNameText.match(displayNameRegex)) {\n            setDisplayNameDescription('닉네임 맨앞에 @를 포함해주세요');\n        }else {\n            if(displayNameText.length < 4) {\n                setDisplayNameDescription('닉네임은 3자리 이상으로 해주세요.');\n            }\n            else {\n                setDisplayNameDescription(' ');\n            }\n        }\n    }, []);\n\n    const passwordChangeHandler = useCallback((event) => {\n        console.log(event.target.value)\n        event.preventDefault();\n\n        const passwordText = event.target.value;\n\n        if(passwordText.length < 6 || passwordText.length > 10) {\n            setPasswordNameDescription('비밀번호는 6자리 이상 10자리 이하입니다.');\n            setIsBtnDisabled(true);\n        }else {\n            setPasswordNameDescription(' ');\n        }\n    }, []);\n\n    const phoneNumberChangeHandler = useCallback((event) => {\n        const phoneText = event.target.value;\n        if(phoneText.length !== 11) {\n            setPhoneNumberNameDescription('전화번호를 올바르게 입력해주세요.');\n        }else {\n            setPhoneNumberNameDescription(' ');\n            setIsBtnDisabled(false);\n        }\n    }, []);\n    \n    // 수정\n    const loginSubmitHandler = useCallback((e) => {\n        e.preventDefault();\n        \n        history.push('/setting/1')\n        // dispatch(actions.loginSubmit(displayRef.current.value));\n    }, []);\n\n    return (\n        <Layout headerNone footerNone={true}>\n            <div style={{height: '60px'}} className=\"flex flex-row items-center justify-between \">\n            </div>\n\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">회원가입 시작</h1>\n                    <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto', whiteSpace: 'preline'}}> ※ 전화번호는 XIRCLE 관련 중요 공지사항을 보낼때 이외에 절대 사용하지 않습니다.</p>\n                </section>\n                <section className=\"px-10 mb-5\">\n                    <section className=\"text-center my-10\">\n                        <form onSubmit={(e) => loginSubmitHandler(e)} autoComplete=\"off\" noValidate>\n                            <div className=\"flex flex-col\"> \n                                <input \n                                    type=\"text\"\n                                    placeholder=\"@사용자 이름(자유)\"\n                                    className=\"bg-gray-100 px-5 py-5\"\n                                    autoFocus\n                                    onChange={(e) => displayNameChangeHandler(e)}\n                                />\n                                {displayNameDescription ? <p style={{color: 'red', margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>{displayNameDescription}</p> : <p style={{color: \"#C5C1C1\", margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>@사용자이름에는 영어 대소문자, 숫자,밑줄 및 마침표만 사용해주세요.</p>}\n                                <input \n                                    type=\"password\"\n                                    placeholder=\"비밀번호\"\n                                    className=\"bg-gray-100 px-5 py-5\"\n                                    onChange={(e) => passwordChangeHandler(e)}\n                                />\n                                {passwordDescription ? <p style={{color: 'red', margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>{passwordDescription}</p> : <p style={{color: \"#C5C1C1\", margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>띄어쓰기 없는 6-10자리 영어 대소문자와 숫자 조합으로 입력해주세요.</p>}\n                                <input \n                                    type=\"text\"\n                                    placeholder=\"전화번호를 입력.\"\n                                    className=\"bg-gray-100 px-5 py-5 mt-5\"\n                                    onChange={(e) => phoneNumberChangeHandler(e)}\n                                />\n                                {phoneNumberDescription ? <p style={{color: 'red', margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>{phoneNumberDescription}</p> : <p style={{color: \"#C5C1C1\", margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>-없이 입력해주세요.</p>}\n                                \n                            </div>\n                            {/* {displayNameCheeckLoading ? (\n                                <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n                                    <LoadingIndicator \n                                        color={{red: 0, green: 0, blue: 0, alpha: 1}}\n                                        segmentWidth={2}\n                                    />\n                                </div>\n                            ) : null} */}\n                            <button disabled={isBtnDisabled} onClick={(e) => loginSubmitHandler(e)} style={{width: '100%', fontSize: 16, padding: \"15px 0\", margin: '40px 0 20px'}} className=\" rounded-lg text-white bg-gray-400 focus:outline-none\">\n                                다음\n                            </button>\n                        </form>\n                    </section>\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default Login;","import axios from 'axios';\n\nexport const Axios = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n})\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const authSuccess = (email, univKor) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        email: email,\n        univ: univKor\n    }\n}\n\nexport const authFail = () => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n    }\n}\n\nexport const errorInit = () => {\n    return {\n        type: actionTypes.ERROR_INIT\n    }\n}\n\nexport const auth = (email, univKor) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(authSuccess(email, univKor));\n                else {\n                    const code = res.data.code;\n                    const errorMsg = res.data.message;\n                    dispatch(authFail());\n                    if(code === 450) {\n                        // 여기서 dispatch 또해야함. 해당 이메일로 정보를 서버에서 가져와야함.\n                        window.location.assign('/my-profile');\n                    }else {\n                        alert(errorMsg);\n                    }\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                const errorMsg = err.data.message;\n                alert(errorMsg);\n                dispatch(authFail(err));\n            })\n    }\n}\n\n// auth Confirm\nexport const authConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const authConfirmFail = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n    }\n}\nexport const authConfirmSuccess = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n    }\n}\nexport const authConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\nexport const authConfirm = (email) => {\n    return dispatch => {\n        dispatch(authConfirmStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess());\n                    dispatch(authConfirmInit());\n                }\n                else {\n                    dispatch(authConfirmFail());\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail());\n                dispatch(authConfirmInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\nexport const loginConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const loginConfirmFail = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n    }\n}\nexport const loginConfirmSuccess = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n    }\n}\nexport const loginConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\n// Login\nexport const loginSubmit = (email) => {\n    return dispatch => {\n        dispatch(loginConfirmStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess());\n                    dispatch(authConfirmInit());\n                }\n                else {\n                    dispatch(authConfirmFail());\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail());\n                dispatch(authConfirmInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\n\nexport const addPhoneNumber = (phoneNumber) => {\n    return {\n        type: actionTypes.ADD_PHONE_NUMBER,\n        phoneNumber,\n    }\n}\nexport const addIsPublic = (isPublic) => {\n    return {\n        type: actionTypes.ADD_IS_PUBLIC,\n        isPublic,\n    }\n}\nexport const addIsGraduate = (isGraduate) => {\n    return {\n        type: actionTypes.ADD_IS_GRADUATE,\n        isGraduate,\n    }\n}\nexport const addGender = (gender) => {\n    return {\n        type: actionTypes.ADD_GENDER,\n        gender,\n    }\n}\nexport const addAge = (age) => {\n    return {\n        type: actionTypes.ADD_AGE,\n        age,\n    }\n}\nexport const addJob = (job) => {\n    return {\n        type: actionTypes.ADD_JOB,\n        job,\n    }\n}\n\nexport const addAdj = (adj) => {\n    return {\n        type: actionTypes.ADD_ADJ,\n        adj,\n    }\n}\n\nexport const addLocation = (location) => {\n    return {\n        type: actionTypes.ADD_LOCATION,\n        location,\n    }\n}\n\n// ArticleImg Submit to AWS S3\nexport const submitArticleImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_ARTICLE_IMGSRC_TO_AWS_START,\n    }\n}\nexport const submitArticleImgToAWSSuccess = (imgAwsUrl) => {\n    return {\n        type: actionTypes.SUBMIT_ARTICLE_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n    }\n}\nexport const submitArticleImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_ARTICLE_IMGSRC_TO_AWS_FAIL,\n    }\n}\nexport const submitImgToAWSInit = () => {\n    return {\n        type: actionTypes.SUBMIT_IMG_SRC_TO_AWS_INIT,\n    }\n}\n\nexport const submitArticleImgToAWS = (articleImg_formData) => {\n    return dispatch => {\n        dispatch(submitArticleImgToAWSStart());\n        \n        console.log(articleImg_formData);\n\n        Axios.post('/img', articleImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitArticleImgToAWSSuccess(imgAwsUrl))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitArticleImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitArticleImgToAWSFail());\n                dispatch(submitImgToAWSInit())\n            })\n    }\n}\n// ----\n\nexport const addArticleText = (articleText) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_TEXT,\n        articleText,\n    }\n}\nexport const addArticleTag = (articleTag) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_HASHTAG,\n        articleTag,\n    }\n}\n\nexport const addInterest = (interestArr) => {\n    return {\n        type: actionTypes.ADD_INTEREST,\n        interestArr,\n    }\n}\n\n// displayName check\nexport const displayNameStart = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_START,\n    }\n}\nexport const displayNameSuccess = (displayName) => {\n    return {\n        type: actionTypes.DISPLAYNAME_SUCCESS,\n        displayName,\n    }\n}\nexport const displayNameFail = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_FAIL,\n    }\n}\nexport const displayNameInit = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_INIT,\n    }\n}\n\nexport const displayName = (displayName) => {\n    return dispatch => {\n        dispatch(displayNameStart());\n\n        const data = {\n            displayName\n        }\n        Axios.post('/check/name', data)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess){ \n                    dispatch(displayNameSuccess(displayName));\n                }else {\n                    dispatch(displayNameFail());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(displayNameFail());\n            })\n    }\n}\n// -----\n\nexport const addIntroText = (introText) => {\n    return {\n        type: actionTypes.ADD_INTRO_TEXT,\n        introText,\n    }\n}\n\n// Submit proflieImgSrc to AWS S3\nexport const submitProfileImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_PROFILE_IMGSRC_TO_AWS_START,\n    }\n}\nexport const submitProfileImgToAWSSuccess = (imgAwsUrl) => {\n    return {\n        type: actionTypes.SUBMIT_PROFILE_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n    }\n}\nexport const submitProfileImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_PROFILE_IMGSRC_TO_AWS_FAIL,\n    }\n}\n\nexport const submitProfileImgToAWS = (profileImg_formData) => {\n    return dispatch => {\n        dispatch(submitProfileImgToAWSStart());\n\n        Axios.post('/img', profileImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitProfileImgToAWSSuccess(imgAwsUrl))\n                }else {\n                    dispatch(submitProfileImgToAWSFail())\n                }\n            })\n            .catch(err => {{\n                console.log(err);\n                dispatch(submitProfileImgToAWSFail())\n            }})\n    }\n}\n// -----\n\n// SubmitToServer\nexport const submitToServerStart = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_START,\n    }\n}\n\nexport const submitToServerSuccess = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_SUCCESS,\n    }\n}\nexport const submitToServerFail = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\n\nexport const submitToServer = (phoneNumberInRedux, isPublicInRedux, isGraduateInRedux, emailInRedux, genderInRedux, ageInRedux, jobInRedux, adjInRedux, locationInRedux, articleImgSrcInRedux, articleTextInRedux, articleTagInRedux, displayNameInRedux, interestArrInRedux, introTextInRedux, profileImgSrcInRedux, resumeText, workPlaceText) => {\n    return dispatch => {\n        dispatch(submitToServerStart());\n        const userData = {\n            phoneNumber: phoneNumberInRedux,\n            email: emailInRedux,\n            isPublic: isPublicInRedux,\n            isGraduate: isGraduateInRedux,\n            gender: genderInRedux, \n            age: ageInRedux,\n            job: jobInRedux, \n            adj: adjInRedux, \n            location: locationInRedux, \n            articleImgSrc: articleImgSrcInRedux, \n            articleText: articleTextInRedux, \n            articleTag: articleTagInRedux,\n            displayName: displayNameInRedux, \n            interestArr: interestArrInRedux, \n            introText: introTextInRedux, \n            profileImgSrc: profileImgSrcInRedux, \n            resume: resumeText,\n            workPlace: workPlaceText\n        };\n        Axios.post('/pre/user', userData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(submitToServerSuccess());\n                else {\n                    dispatch(submitToServerFail());\n                    alert(res.data.message);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitToServerFail());\n                alert('일시적인 오류가 발생했습니다. 잠시후 다시 시도해주세요.');\n            })\n    }\n}\n\n\nexport const updateProfileImg = (updatedProfileImg) => {\n    return {\n        type: actionTypes.UPDATE_PROFILE_IMG,\n        updatedProfileImg,\n    }\n}\n\nexport const updateProfileImgToServer = (updatedProfileImg) => {\n    return dispatch => {\n        dispatch(updateProfileImg(updatedProfileImg));\n        // 서버에 보내기\n    }\n}\n"],"sourceRoot":""}