{"version":3,"sources":["pages/Auth/Login.js","axios-instance.js","store/actions/Auth.js","store/actions/User.js"],"names":["Login","history","useState","displayNameDescription","setDisplayNameDescription","passwordDescription","setPasswordNameDescription","isBtnDisabled","setIsBtnDisabled","isLoading","useSelector","store","auth","loading","isEmailSent","displayRef","isConfirmed","useRef","displayNameCheeckLoading","user","displayNameUI","displayNameError","error","dispatch","useDispatch","displayNameChangeHandler","useCallback","event","preventDefault","displayNameText","target","value","match","length","passwordChangeHandler","console","log","passwordText","loginSubmitHandler","e","actions","headerNone","footerNone","style","height","borderBottom","className","onClick","goBack","width","marginLeft","cursor","src","alt","href","color","marginRight","padding","textAlign","marginBottom","fontSize","margin","whiteSpace","left","red","green","blue","alpha","segmentWidth","onSubmit","autoComplete","noValidate","type","placeholder","autoFocus","onChange","current","disabled","push","Axios","axios","create","baseURL","authFail","actionTypes","email","univKor","authData","post","then","res","data","success","univ","authSuccess","code","errorMsg","message","window","location","assign","alert","catch","err","addIsPublic","isPublic","addIsGraduate","isGraduate","addGender","gender","addAge","age","addJob","job","addAdj","adj","addLocation","submitArticleImgToAWSFail","submitImgToAWSInit","submitArticleImgToAWS","articleImg_formData","imgAwsUrl","submitArticleImgToAWSSuccess","addArticleText","articleText","addArticleTag","articleTag","addInterest","interestArr","displayNameInit","addIntroText","introText","submitProfileImgToAWSFail","submitProfileImgToAWS","profileImg_formData","isSuccess","submitProfileImgToAWSSuccess","submitToServerFail","submitToServer","phoneNumberInRedux","isPublicInRedux","isGraduateInRedux","emailInRedux","genderInRedux","ageInRedux","jobInRedux","adjInRedux","locationInRedux","articleImgSrcInRedux","articleTextInRedux","articleTagInRedux","displayNameInRedux","interestArrInRedux","introTextInRedux","profileImgSrcInRedux","resumeText","workPlaceText","userData","phoneNumber","articleImgSrc","displayName","profileImgSrc","resume","workPlace","updateProfileImgToServer","updatedProfileImg","updateProfileImg"],"mappings":"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","file":"static/js/12.e34c5527.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState }  from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/layout';\nimport * as actions from '../../store/actions/index';\nimport LoadingIndicator from 'react-loading-indicator';\n\nconst Login = ({ history }) => {\n    const [displayNameDescription, setDisplayNameDescription] = useState(null);\n    const [passwordDescription, setPasswordNameDescription] = useState(null);\n    const [isBtnDisabled, setIsBtnDisabled] = useState(true);\n\n    const isLoading = useSelector(store => store.auth.loading);\n    const isEmailSent = useSelector(store => store.auth.isEmailSent); //만약 토큰이 있으면 AUTH_SUCCESS 이므로\n    const isConfirmed = useSelector(store => store.auth.isConfirmed);\n    \n    const displayRef = useRef();\n    const displayNameCheeckLoading = useSelector(store => store.user.displayNameUI.loading);\n    const displayNameError = useSelector(store => store.user.displayNameUI.error);\n\n    const dispatch = useDispatch();\n\n    const displayNameChangeHandler = useCallback((event) => {\n        event.preventDefault();\n        const displayNameText = event.target.value;\n        const displayNameRegex = /^@/;\n        if(!displayNameText.match(displayNameRegex)) {\n            setDisplayNameDescription('닉네임 맨앞에 @를 포함해주세요');\n        }else {\n            if(displayNameText.length < 4) {\n                setDisplayNameDescription('닉네임은 3자리 이상으로 해주세요.');\n            }\n            else {\n                setDisplayNameDescription(null);\n            }\n        }\n    }, []);\n    const passwordChangeHandler = useCallback((event) => {\n        console.log(event.target.value)\n        event.preventDefault();\n\n        const passwordText = event.target.value;\n\n        if(passwordText.length < 6 || passwordText.length > 10) {\n            setPasswordNameDescription('비밀번호는 6자리 이상 10자리 이하입니다.');\n            setIsBtnDisabled(true);\n        }else {\n            setPasswordNameDescription(null);\n            if(displayNameDescription === null)\n                setIsBtnDisabled(false);\n        }\n    }, []);\n    \n    // 수정\n    const loginSubmitHandler = useCallback((e) => {\n        e.preventDefault();\n        if(displayNameError !== null) // 리덕스에 있는데도 다시 제출하는건, 중복됐다는 거니까 ERROR_INIT\n            dispatch(actions.displayNameInit());\n        \n        // dispatch(actions.loginSubmit(displayRef.current.value));\n    }, [displayNameError]);\n\n    return (\n        <Layout headerNone footerNone={true}>\n            <nav style={{height: '60px', borderBottom: '1px solid #eee'}} className=\"flex flex-row items-center justify-between \">\n                <img\n                    onClick={() => history.goBack()} \n                    style={{width: '25px', height: '25px', marginLeft: 10, cursor: 'pointer'}}\n                    src=\"/arrow-back-outline.svg\"\n                    alt=\"back\"\n                />\n                <a href='http://pf.kakao.com/_kDxhtK' style={{color: \"#949393\", cursor: 'pointer', marginRight: 30}}> 문의하기 </a>\n            </nav>\n\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">로그인</h1>\n                    <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto', whiteSpace: 'pre'}}> XIRCLE을 이용해 주셔서 감사합니다. <br/> 연고링은 베타테스트단계로 <br/> 서울대 고려대 연세대 서강대 한양대 성균관대<br/> 학생들로만 진행중입니다.</p>\n                </section>\n                <section className=\"px-10 mb-5\">\n                    {isEmailSent ? (\n                        <>\n                            {isLoading ? (\n                            <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n                                <LoadingIndicator \n                                    color={{red: 0, green: 0, blue: 0, alpha: 1}}\n                                    segmentWidth={2}\n                                />\n                            </div>\n                            ) : null}\n                            <button onClick={(e) => console.log(e)} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-10 bg-black text-white  focus:outline-none\">\n                                인증 후 클릭\n                            </button>\n                            <button onClick={(e) => console.log(e)} style={{color: \"#949393\"}} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-3 bg-white focus:outline-none \">\n                                인증메일 재전송\n                            </button>\n                            <p style={{color: \"#949393\", margin: '30px', textAlign: 'center'}}>인증이 안되시나요?</p>\n                        </>\n                    ) : (\n                        <section className=\"text-center my-10\">\n                            <form onSubmit={(e) => loginSubmitHandler(e)} autoComplete=\"off\" noValidate>\n                                <div className=\"flex flex-col\"> \n                                    <input \n                                        type=\"text\"\n                                        placeholder=\"@닉네임을 적어주세요\"\n                                        className=\"bg-gray-100 px-5 py-5\"\n                                        autoFocus\n                                        onChange={(e) => displayNameChangeHandler(e)}\n                                    />\n                                    {displayNameDescription ? <p style={{color: 'red', textAlign: 'left', fontSize: 12, margin: '5px 0'}}>{displayNameDescription}</p> : <p style={{height: 17, margin: '5px 0'}}></p>}\n                                    <input \n                                        type=\"password\"\n                                        placeholder=\"비밀번호를 적어주세요.\"\n                                        className=\"bg-gray-100 px-5 py-5\"\n                                        onChange={(e) => passwordChangeHandler(e)}\n                                    />\n                                    {passwordDescription ? <p style={{color: 'red', textAlign: 'left', fontSize: 12, margin: '5px 0'}}>{passwordDescription}</p> : <p style={{height: 17, margin: '5px 0'}}></p>}\n                                </div>\n                                {displayNameError & !displayNameCheeckLoading ? <p style={{color: 'red', margin: 0}}>[중복]사용자 이름 {displayRef.current.value}은 사용하실 수 없습니다.</p> : null}\n                                {displayNameCheeckLoading ? (\n                                    <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n                                        <LoadingIndicator \n                                            color={{red: 0, green: 0, blue: 0, alpha: 1}}\n                                            segmentWidth={2}\n                                        />\n                                    </div>\n                                ) : null}\n                                <button disabled={isBtnDisabled} onClick={(e) => loginSubmitHandler(e)} style={{width: '100%', fontSize: 16, padding: \"15px 0\", margin: '40px 0 20px'}} className=\" rounded-lg text-white bg-gray-400 focus:outline-none\">\n                                    다음\n                                </button>\n                            </form>\n                            <p onClick={(e) => history.push('/find-auth')} style={{color: \"#949393\", cursor: 'pointer'}}>잊어버리셨나요?</p>\n                        </section>\n                    )}\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default Login;","import axios from 'axios';\n\nexport const Axios = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n})\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const authSuccess = (email, univKor) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        email: email,\n        univ: univKor\n    }\n}\n\nexport const authFail = () => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n    }\n}\n\nexport const errorInit = () => {\n    return {\n        type: actionTypes.ERROR_INIT\n    }\n}\n\nexport const auth = (email, univKor) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(authSuccess(email, univKor));\n                else {\n                    const code = res.data.code;\n                    const errorMsg = res.data.message;\n                    dispatch(authFail());\n                    if(code === 450) {\n                        // 여기서 dispatch 또해야함. 해당 이메일로 정보를 서버에서 가져와야함.\n                        window.location.assign('/my-profile');\n                    }else {\n                        alert(errorMsg);\n                    }\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                const errorMsg = err.data.message;\n                alert(errorMsg);\n                dispatch(authFail(err));\n            })\n    }\n}\n\n// auth Confirm\nexport const authConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const authConfirmFail = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n    }\n}\nexport const authConfirmSuccess = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n    }\n}\nexport const authConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\nexport const authConfirm = (email) => {\n    return dispatch => {\n        dispatch(authConfirmStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess());\n                    dispatch(authConfirmInit());\n                }\n                else {\n                    dispatch(authConfirmFail());\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail());\n                dispatch(authConfirmInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\nexport const loginConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const loginConfirmFail = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n    }\n}\nexport const loginConfirmSuccess = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n    }\n}\nexport const loginConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\n// Login\nexport const loginSubmit = (email) => {\n    return dispatch => {\n        dispatch(loginConfirmStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess());\n                    dispatch(authConfirmInit());\n                }\n                else {\n                    dispatch(authConfirmFail());\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail());\n                dispatch(authConfirmInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\n\nexport const addPhoneNumber = (phoneNumber) => {\n    return {\n        type: actionTypes.ADD_PHONE_NUMBER,\n        phoneNumber,\n    }\n}\nexport const addIsPublic = (isPublic) => {\n    return {\n        type: actionTypes.ADD_IS_PUBLIC,\n        isPublic,\n    }\n}\nexport const addIsGraduate = (isGraduate) => {\n    return {\n        type: actionTypes.ADD_IS_GRADUATE,\n        isGraduate,\n    }\n}\nexport const addGender = (gender) => {\n    return {\n        type: actionTypes.ADD_GENDER,\n        gender,\n    }\n}\nexport const addAge = (age) => {\n    return {\n        type: actionTypes.ADD_AGE,\n        age,\n    }\n}\nexport const addJob = (job) => {\n    return {\n        type: actionTypes.ADD_JOB,\n        job,\n    }\n}\n\nexport const addAdj = (adj) => {\n    return {\n        type: actionTypes.ADD_ADJ,\n        adj,\n    }\n}\n\nexport const addLocation = (location) => {\n    return {\n        type: actionTypes.ADD_LOCATION,\n        location,\n    }\n}\n\n// ArticleImg Submit to AWS S3\nexport const submitArticleImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_ARTICLE_IMGSRC_TO_AWS_START,\n    }\n}\nexport const submitArticleImgToAWSSuccess = (imgAwsUrl) => {\n    return {\n        type: actionTypes.SUBMIT_ARTICLE_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n    }\n}\nexport const submitArticleImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_ARTICLE_IMGSRC_TO_AWS_FAIL,\n    }\n}\nexport const submitImgToAWSInit = () => {\n    return {\n        type: actionTypes.SUBMIT_IMG_SRC_TO_AWS_INIT,\n    }\n}\n\nexport const submitArticleImgToAWS = (articleImg_formData) => {\n    return dispatch => {\n        dispatch(submitArticleImgToAWSStart());\n        \n        console.log(articleImg_formData);\n\n        Axios.post('/img', articleImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitArticleImgToAWSSuccess(imgAwsUrl))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitArticleImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitArticleImgToAWSFail());\n                dispatch(submitImgToAWSInit())\n            })\n    }\n}\n// ----\n\nexport const addArticleText = (articleText) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_TEXT,\n        articleText,\n    }\n}\nexport const addArticleTag = (articleTag) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_HASHTAG,\n        articleTag,\n    }\n}\n\nexport const addInterest = (interestArr) => {\n    return {\n        type: actionTypes.ADD_INTEREST,\n        interestArr,\n    }\n}\n\n// displayName check\nexport const displayNameStart = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_START,\n    }\n}\nexport const displayNameSuccess = (displayName) => {\n    return {\n        type: actionTypes.DISPLAYNAME_SUCCESS,\n        displayName,\n    }\n}\nexport const displayNameFail = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_FAIL,\n    }\n}\nexport const displayNameInit = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_INIT,\n    }\n}\n\nexport const displayName = (displayName) => {\n    return dispatch => {\n        dispatch(displayNameStart());\n\n        const data = {\n            displayName\n        }\n        Axios.post('/check/name', data)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess){ \n                    dispatch(displayNameSuccess(displayName));\n                }else {\n                    dispatch(displayNameFail());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(displayNameFail());\n            })\n    }\n}\n// -----\n\nexport const addIntroText = (introText) => {\n    return {\n        type: actionTypes.ADD_INTRO_TEXT,\n        introText,\n    }\n}\n\n// Submit proflieImgSrc to AWS S3\nexport const submitProfileImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_PROFILE_IMGSRC_TO_AWS_START,\n    }\n}\nexport const submitProfileImgToAWSSuccess = (imgAwsUrl) => {\n    return {\n        type: actionTypes.SUBMIT_PROFILE_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n    }\n}\nexport const submitProfileImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_PROFILE_IMGSRC_TO_AWS_FAIL,\n    }\n}\n\nexport const submitProfileImgToAWS = (profileImg_formData) => {\n    return dispatch => {\n        dispatch(submitProfileImgToAWSStart());\n\n        Axios.post('/img', profileImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitProfileImgToAWSSuccess(imgAwsUrl))\n                }else {\n                    dispatch(submitProfileImgToAWSFail())\n                }\n            })\n            .catch(err => {{\n                console.log(err);\n                dispatch(submitProfileImgToAWSFail())\n            }})\n    }\n}\n// -----\n\n// SubmitToServer\nexport const submitToServerStart = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_START,\n    }\n}\n\nexport const submitToServerSuccess = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_SUCCESS,\n    }\n}\nexport const submitToServerFail = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\n\nexport const submitToServer = (phoneNumberInRedux, isPublicInRedux, isGraduateInRedux, emailInRedux, genderInRedux, ageInRedux, jobInRedux, adjInRedux, locationInRedux, articleImgSrcInRedux, articleTextInRedux, articleTagInRedux, displayNameInRedux, interestArrInRedux, introTextInRedux, profileImgSrcInRedux, resumeText, workPlaceText) => {\n    return dispatch => {\n        dispatch(submitToServerStart());\n        const userData = {\n            phoneNumber: phoneNumberInRedux,\n            email: emailInRedux,\n            isPublic: isPublicInRedux,\n            isGraduate: isGraduateInRedux,\n            gender: genderInRedux, \n            age: ageInRedux,\n            job: jobInRedux, \n            adj: adjInRedux, \n            location: locationInRedux, \n            articleImgSrc: articleImgSrcInRedux, \n            articleText: articleTextInRedux, \n            articleTag: articleTagInRedux,\n            displayName: displayNameInRedux, \n            interestArr: interestArrInRedux, \n            introText: introTextInRedux, \n            profileImgSrc: profileImgSrcInRedux, \n            resume: resumeText,\n            workPlace: workPlaceText\n        };\n        Axios.post('/pre/user', userData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(submitToServerSuccess());\n                else {\n                    dispatch(submitToServerFail());\n                    alert(res.data.message);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitToServerFail());\n                alert('일시적인 오류가 발생했습니다. 잠시후 다시 시도해주세요.');\n            })\n    }\n}\n\n\nexport const updateProfileImg = (updatedProfileImg) => {\n    return {\n        type: actionTypes.UPDATE_PROFILE_IMG,\n        updatedProfileImg,\n    }\n}\n\nexport const updateProfileImgToServer = (updatedProfileImg) => {\n    return dispatch => {\n        dispatch(updateProfileImg(updatedProfileImg));\n        // 서버에 보내기\n    }\n}\n"],"sourceRoot":""}