{"version":3,"sources":["pages/Auth/Start.js","axios-instance.js","store/actions/User.js","store/actions/Auth.js"],"names":["Login","history","useState","displayName","setDisplayName","pwd","setPwd","phoneNum","setPhoneNum","displayNameDescription","setDisplayNameDescription","passwordDescription","setPasswordNameDescription","phoneNumberDescription","setPhoneNumberNameDescription","isBtnDisabled","setIsBtnDisabled","displayRef","useRef","passwordRef","phoneNumberRef","isLoading","useSelector","store","auth","loading","errCodeInRedux","errCode","dispatch","useDispatch","useEffect","console","log","push","current","value","alert","displayNameChangeHandler","useCallback","event","preventDefault","displayNameText","target","match","length","passwordChangeHandler","passwordText","phoneNumberChangeHandler","phoneText","joinSubmitHandler","e","phoneNumberText","actions","headerNone","footerNone","style","height","className","padding","textAlign","marginBottom","fontSize","color","margin","whiteSpace","onSubmit","autoComplete","noValidate","type","placeholder","autoFocus","ref","onChange","left","red","green","blue","alpha","segmentWidth","disabled","onClick","width","Axios","axios","create","baseURL","addIsPublic","isPublic","actionTypes","addIsGraduate","isGraduate","addGender","gender","addAge","age","addJob","job","addAdj","adj","addLocation","location","lng","lat","addIntroText","introText","addInterest","interestArr","submitImgToAWSStart","submitImgToAWSSuccess","imgAwsUrl","payloadType","submitImgToAWSFail","submitImgToAWSInit","submitArticleImgToAWS","articleImg_formData","post","then","res","data","success","catch","err","submitProfileImgToAWS","profileImg_formData","addArticleText","articleText","addArticleTag","articleTag","submitToServerFail","submitToServerInit","submitToServer","phoneNumberInRedux","latitudeInRedux","longitudeInRedux","passwordInRedux","isPublicInRedux","isGraduateInRedux","emailInRedux","genderInRedux","ageInRedux","jobInRedux","adjInRedux","locationInRedux","articleImgSrcInRedux","articleTextInRedux","articleTagInRedux","displayNameInRedux","interestArrInRedux","introTextInRedux","profileImgSrcInRedux","resumeText","workPlaceText","userData","longitude","latitude","profileImgSrc","phoneNumber","resume","workPlace","password","email","articleImgSrc","message","updateProfileImgToServer","updatedProfileImg","updateProfileImg","authFail","errorInit","authData","authSuccess","code","errorMsg","authConfirmFail","authConfirmInit","authConfirm","univKor","univ","authConfirmSuccess","findAuthFail","findAuthInit","findAuth","joinFail","joinInit","joinSubmit","wpd","joinSuccess","loginFail","error","loginInit","loginSubmit","token","loginSuccess","localStorage","setItem","getUser","getUserSuccess","displayNameInUser","university","hashtagCount","addProfileImgSrc","addDidsplayName","addResume","addWorkPlace","get","headers"],"mappings":"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","file":"static/js/13.0ee53194.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState }  from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/layout';\nimport * as actions from '../../store/actions/index';\nimport LoadingIndicator from 'react-loading-indicator';\n\nconst Login = ({ history }) => {\n    const [displayName, setDisplayName] = useState('');\n    const [pwd, setPwd] = useState('');\n    const [phoneNum, setPhoneNum] = useState('');\n\n    const [displayNameDescription, setDisplayNameDescription] = useState(null);\n    const [passwordDescription, setPasswordNameDescription] = useState(null);\n    const [phoneNumberDescription, setPhoneNumberNameDescription] = useState(null);\n    const [isBtnDisabled, setIsBtnDisabled] = useState(true);\n\n    const displayRef = useRef();\n    const passwordRef = useRef();\n    const phoneNumberRef = useRef();\n\n    const isLoading = useSelector(store => store.auth.loading);\n    const errCodeInRedux = useSelector(store => store.auth.errCode);\n    \n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(errCodeInRedux === null) {\n            return null;\n        }else if(errCodeInRedux === 0) {\n            console.log('닉네임 생성 성공');\n            history.push('/setting/1')\n        }else if(errCodeInRedux === 452) {\n            setDisplayNameDescription(`[중복] ${displayRef.current.value}은 사용하실 수 없습니다.`);\n        }else {\n            alert(\"네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요.\")\n        }\n    }, [errCodeInRedux]);\n\n    const displayNameChangeHandler = useCallback((event) => {\n        event.preventDefault();\n        const displayNameText = event.target.value;\n        setDisplayName(displayNameText);\n\n        const displayNameRegex = /^@/;\n        if(!displayNameText.match(displayNameRegex)) {\n            setDisplayNameDescription('닉네임 맨앞에 @를 포함해주세요');\n            setIsBtnDisabled(true);\n        }else {\n            if(displayNameText.length < 4) {\n                setDisplayNameDescription('닉네임은 3자리 이상으로 해주세요.');\n                setIsBtnDisabled(true);\n            }else {\n                setDisplayNameDescription(' ');\n                if(phoneNumberDescription === ' ' && passwordDescription === ' ')\n                    setIsBtnDisabled(false);\n            }\n        }\n    }, [displayName, pwd, phoneNum]);\n\n    const passwordChangeHandler = useCallback((event) => {\n        event.preventDefault();\n\n        const passwordText = event.target.value;\n        setPwd(passwordText);\n        if(passwordText.length < 6 || passwordText.length > 10) {\n            setPasswordNameDescription('비밀번호는 6자리 이상 10자리 이하입니다.');\n            setIsBtnDisabled(true);\n        }else {\n            setPasswordNameDescription(' ');\n            if(phoneNumberDescription === ' ' && displayNameDescription === ' ')\n                setIsBtnDisabled(false);\n        }\n    }, [displayName, pwd, phoneNum]);\n\n    const phoneNumberChangeHandler = useCallback((event) => {\n        const phoneText = event.target.value;\n        setPhoneNum(phoneText);\n        if(phoneText.length !== 11) {\n            setPhoneNumberNameDescription('전화번호를 올바르게 입력해주세요.');\n            setIsBtnDisabled(true);\n        }else {\n            setPhoneNumberNameDescription(' ');\n            if(displayNameDescription === ' ' && passwordDescription === ' ')\n                setIsBtnDisabled(false);\n        }\n    }, [displayName, pwd, phoneNum]);\n    \n    // 수정\n    const joinSubmitHandler = useCallback((e) => {\n        e.preventDefault();\n        \n        const displayNameText = displayRef.current.value;\n        const passwordText = passwordRef.current.value;\n        const phoneNumberText = phoneNumberRef.current.value;\n\n        console.log(displayNameText, passwordText, phoneNumberText)\n        dispatch(actions.joinSubmit(displayNameText, passwordText, phoneNumberText));\n    }, []);\n\n    return (\n        <Layout headerNone footerNone>\n            <div style={{height: '60px'}} className=\"flex flex-row items-center justify-between \">\n            </div>\n\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">회원가입 시작</h1>\n                    <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto', whiteSpace: 'preline'}}> ※ 전화번호는 XIRCLE 관련 중요 공지사항을 보낼때 이외에 절대 사용하지 않습니다.</p>\n                </section>\n                <section className=\"px-10 mb-5\">\n                    <section className=\"text-center my-10\">\n                        <form onSubmit={(e) => joinSubmitHandler(e)} autoComplete=\"off\" noValidate>\n                            <div className=\"flex flex-col\"> \n                                <input \n                                    type=\"text\"\n                                    placeholder=\"@사용자 이름(자유)\"\n                                    className=\"bg-gray-100 px-5 py-5\"\n                                    autoFocus\n                                    ref={displayRef}\n                                    onChange={(e) => displayNameChangeHandler(e)}\n                                />\n                                {displayNameDescription ? <p style={{color: 'red', margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>{displayNameDescription}</p> : <p style={{color: \"#C5C1C1\", margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>@사용자이름에는 영어 대소문자, 숫자,밑줄 및 마침표만 사용해주세요.</p>}\n                                <input \n                                    type=\"password\"\n                                    placeholder=\"비밀번호\"\n                                    className=\"bg-gray-100 px-5 py-5\"\n                                    ref={passwordRef}\n                                    onChange={(e) => passwordChangeHandler(e)}\n                                />\n                                {passwordDescription ? <p style={{color: 'red', margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>{passwordDescription}</p> : <p style={{color: \"#C5C1C1\", margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>띄어쓰기 없는 6-10자리 영어 대소문자와 숫자 조합으로 입력해주세요.</p>}\n                                <input \n                                    type=\"text\"\n                                    placeholder=\"전화번호를 입력.\"\n                                    className=\"bg-gray-100 px-5 py-5 mt-5\"\n                                    ref={phoneNumberRef}\n                                    onChange={(e) => phoneNumberChangeHandler(e)}\n                                />\n                                {phoneNumberDescription ? <p style={{color: 'red', margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>{phoneNumberDescription}</p> : <p style={{color: \"#C5C1C1\", margin: '10px 0 10px 5px', whiteSpace: 'pre', fontSize: 12, textAlign: 'left'}}>-없이 입력해주세요.</p>}\n                                \n                            </div>\n                            {isLoading ? (\n                                <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n                                    <LoadingIndicator \n                                        color={{red: 0, green: 0, blue: 0, alpha: 1}}\n                                        segmentWidth={2}\n                                    />\n                                </div>\n                            ) : null}\n                            <button disabled={isBtnDisabled} onClick={(e) => joinSubmitHandler(e)} style={{width: '100%', fontSize: 16, padding: \"15px 0\", margin: '40px 0 20px'}} className=\" rounded-lg text-white bg-gray-400 focus:outline-none\">\n                                다음\n                            </button>\n                        </form>\n                    </section>\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default Login;","import axios from 'axios';\n\nexport const Axios = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n})\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\n\n// GET시 /user/profile를 리덕스에 담기위한 액션.\nexport const addProfileImgSrc = (profileImgSrc) => {\n    return {\n        type: actionTypes.ADD_PROFILE_IMG_SRC,\n        profileImgSrc,\n    }\n}\nexport const addPhoneNumber = (phoneNumber) => {\n    return {\n        type: actionTypes.ADD_PHONE_NUMBER,\n        phoneNumber,\n    }\n}\nexport const addIsPublic = (isPublic) => {\n    return {\n        type: actionTypes.ADD_IS_PUBLIC,\n        isPublic,\n    }\n}\nexport const addIsGraduate = (isGraduate) => {\n    return {\n        type: actionTypes.ADD_IS_GRADUATE,\n        isGraduate,\n    }\n}\nexport const addDidsplayName = (displayNameInUser) => {\n    return {\n        type: actionTypes.ADD_DISPLAY_NAME,\n        displayNameInUser,\n    }\n}\nexport const addGender = (gender) => {\n    return {\n        type: actionTypes.ADD_GENDER,\n        gender,\n    }\n}\nexport const addUniv = (univ) => {\n    return {\n        type: actionTypes.ADD_UNIV,\n        univ,\n    }\n}\nexport const addAge = (age) => {\n    return {\n        type: actionTypes.ADD_AGE,\n        age,\n    }\n}\nexport const addJob = (job) => {\n    return {\n        type: actionTypes.ADD_JOB,\n        job,\n    }\n}\n\nexport const addAdj = (adj) => {\n    return {\n        type: actionTypes.ADD_ADJ,\n        adj,\n    }\n}\nexport const addLocation = (location, lng, lat) => {\n    return {\n        type: actionTypes.ADD_LOCATION,\n        location,\n        lng,\n        lat\n    }\n}\nexport const addResume = (resume) => {\n    return {\n        type: actionTypes.ADD_RESUME,\n        resume,\n    }\n}\nexport const addWorkPlace = (workPlace) => {\n    return {\n        type: actionTypes.ADD_WORKPLACE,\n        workPlace,\n    }\n}\nexport const addIntroText = (introText) => {\n    return {\n        type: actionTypes.ADD_INTRO_TEXT,\n        introText,\n    }\n}\nexport const addInterest = (interestArr) => {\n    return {\n        type: actionTypes.ADD_INTEREST,\n        interestArr,\n    }\n}\n\n// ArticleImg Submit to AWS S3\nexport const submitImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_START,\n        \n    }\n}\nexport const submitImgToAWSSuccess = (imgAwsUrl, payloadType) => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n        payloadType,\n    }\n}\nexport const submitImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_FAIL,\n    }\n}\nexport const submitImgToAWSInit = () => {\n    return {\n        type: actionTypes.SUBMIT_IMG_SRC_TO_AWS_INIT,\n    }\n}\n\nexport const submitArticleImgToAWS = (articleImg_formData, payloadType) => {\n    return dispatch => {\n        dispatch(submitImgToAWSStart());\n\n        Axios.post('/img', articleImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    console.log(payloadType)\n                    dispatch(submitImgToAWSSuccess(imgAwsUrl, payloadType))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitImgToAWSFail());\n                dispatch(submitImgToAWSInit())\n            })\n    }\n}\n// ----\n\n// Submit proflieImgSrc to AWS S3\nexport const submitProfileImgToAWS = (profileImg_formData, type) => {\n    return dispatch => {\n        dispatch(submitImgToAWSStart());\n\n        Axios.post('/img', profileImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitImgToAWSSuccess(imgAwsUrl, type))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {{\n                console.log(err);\n                dispatch(submitImgToAWSFail())\n            }})\n    }\n}\n// -----\n\nexport const addArticleText = (articleText) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_TEXT,\n        articleText,\n    }\n}\nexport const addArticleTag = (articleTag) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_HASHTAG,\n        articleTag,\n    }\n}\n\n\n\n\n// SubmitToServer\nexport const submitToServerStart = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_START,\n    }\n}\n\nexport const submitToServerSuccess = (resume, workPlace) => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_SUCCESS,\n        resume,\n        workPlace,\n    }\n}\nexport const submitToServerFail = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\nexport const submitToServerInit = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\nexport const submitToServer = (phoneNumberInRedux, latitudeInRedux, longitudeInRedux, passwordInRedux, isPublicInRedux, isGraduateInRedux, emailInRedux, genderInRedux, ageInRedux, jobInRedux, adjInRedux, locationInRedux, articleImgSrcInRedux, articleTextInRedux, articleTagInRedux, displayNameInRedux, interestArrInRedux, introTextInRedux, profileImgSrcInRedux, resumeText, workPlaceText) => {\n    return dispatch => {\n        dispatch(submitToServerStart());\n        const userData = {\n            gender: genderInRedux, \n            age: ageInRedux,\n            adj: adjInRedux, \n            job: jobInRedux, \n            location: locationInRedux, \n            longitude: longitudeInRedux,\n            latitude: latitudeInRedux,\n            displayName: displayNameInRedux, \n            profileImgSrc: profileImgSrcInRedux, \n            introText: introTextInRedux, \n            interestArr: interestArrInRedux, \n            phoneNumber: phoneNumberInRedux,\n            isPublic: isPublicInRedux,\n            isGraduate: isGraduateInRedux,\n            resume: resumeText,\n            workPlace: workPlaceText,\n            password: passwordInRedux,\n            email: emailInRedux,\n            articleImgSrc: articleImgSrcInRedux, \n            articleText: articleTextInRedux, \n            articleTag: articleTagInRedux,\n        };\n        Axios.post('/pre/user', userData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(submitToServerSuccess(resumeText, workPlaceText));\n                else {\n                    dispatch(submitToServerFail());\n                    dispatch(submitToServerInit());\n                    alert(res.data.message);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitToServerFail());\n                dispatch(submitToServerInit());\n                alert('일시적인 오류가 발생했습니다. 잠시후 다시 시도해주세요.');\n            })\n    }\n}\n\n\nexport const updateProfileImg = (updatedProfileImg) => {\n    return {\n        type: actionTypes.UPDATE_PROFILE_IMG,\n        updatedProfileImg,\n    }\n}\n\nexport const updateProfileImgToServer = (updatedProfileImg) => {\n    return dispatch => {\n        dispatch(updateProfileImg(updatedProfileImg));\n        // 서버에 보내기\n    }\n}\n","import * as actionTypes from './actionTypes';\nimport { addProfileImgSrc, addIsPublic, addIsGraduate, addDidsplayName, addAge, addGender, addJob, addAdj, addLocation, addResume, addWorkPlace, addInterest, addUniv, addIntroText, }  from '../actions/User';\nimport { Axios } from '../../axios-instance';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const authSuccess = (email) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        email: email,\n    }\n}\n\nexport const authFail = () => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n    }\n}\n\nexport const errorInit = () => {\n    return {\n        type: actionTypes.ERROR_INIT\n    }\n}\n// Auth page, 이메일 보내기\nexport const auth = (email) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(authSuccess(email));\n                else {\n                    const errCode = res.data.code;\n                    dispatch(authFail(errCode));\n                    dispatch(errorInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                const errorMsg = err.data.message;\n                alert(errorMsg);\n                dispatch(authFail(err));\n                dispatch(errorInit());\n            })\n    }\n}\n\n// Auth page, Confirm 하기\nexport const authConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const authConfirmFail = (errCode) => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n        errCode,\n    }\n}\nexport const authConfirmSuccess = (univKor) => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n        univ: univKor,\n    }\n}\nexport const authConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\nexport const authConfirm = (email, code, univKor) => {\n    console.log(univKor);\n    return dispatch => {\n        dispatch(authConfirmStart());\n        const authData = {\n            email,\n            code, \n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess(univKor));\n                    dispatch(authConfirmInit());\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(authConfirmFail(errCode));\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail(err.code));\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// 닉네임/비번찾기 페이지.\nexport const findAuthStart = () => {\n    return {\n        type: actionTypes.FIND_AUTH_START,\n    }\n}\nexport const findAuthSuccess = () => {\n    return {\n        type: actionTypes.FIND_AUTH_SUCCESS,\n    }\n}\nexport const findAuthFail = (errCode) => {\n    return {\n        type: actionTypes.FIND_AUTH_FAIL,\n        errCode,\n    }\n}\nexport const findAuthInit = () => {\n    return {\n        type: actionTypes.FIND_AUTH_INIT,\n    }\n}\nexport const findAuth = (email) => {\n    return dispatch => {\n        dispatch(findAuthStart());\n        const authData = {\n            email,\n        };\n        console.log(authData);\n        Axios.post('/find/info', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(findAuthSuccess());\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(findAuthFail(errCode));\n                    dispatch(findAuthInit());\n                    if(errCode == 457) {\n                        alert(\"가입되지 않은 이메일입니다.\")\n                    }else if(errCode === 451) {\n                        alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요');\n                    }\n                }\n            })\n            .catch(err => {\n                const errCode = err.data.code;\n                dispatch(findAuthFail(errCode));\n                dispatch(findAuthInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요');\n            })\n    }\n}\n\n// Start 페이지. 첫 회원가입 \nexport const joinStart = () => {\n    return {\n        type: actionTypes.JOIN_START,\n    }\n}\nexport const joinSuccess = (displayName, pwd, phoneNumber) => {\n    return {\n        type: actionTypes.JOIN_SUCCESS,\n        displayName,\n        pwd,\n        phoneNumber,\n    }\n}\nexport const joinFail = (errCode) => {\n    return {\n        type: actionTypes.JOIN_FAIL,\n        errCode,\n    }\n}\nexport const joinInit = () => {\n    return {\n        type: actionTypes.JOIN_INIT,\n    }\n}\nexport const joinSubmit = (displayName, wpd, phoneNumber) => {\n    return dispatch => {\n        dispatch(joinStart());\n        const authData = {\n            displayName,\n        };\n        console.log(authData);\n        Axios.post('/check/name', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(joinSuccess(displayName, wpd, phoneNumber));\n                }\n                else {\n                    const errCode = res.data.data;\n                    console.log(errCode);\n                    dispatch(joinFail(errCode));\n                    dispatch(joinInit());\n                }\n            })\n            .catch(err => {\n                const errCode = err;\n                dispatch(joinFail(errCode));\n                dispatch(joinInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// Login 페이지, submit 하기\nexport const loginStart = () => {\n    return {\n        type: actionTypes.LOGIN_START,\n    }\n}\nexport const loginFail = (error) => {\n    return {\n        type: actionTypes.LOGIN_FAIL,\n        error,\n    }\n}\nexport const loginSuccess = (displayName, token) => {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        displayName,\n        token,\n    }\n}\nexport const loginInit = () => {\n    return {\n        type: actionTypes.LOGIN_INIT,\n    }\n}\nexport const loginSubmit = (displayName, password) => {\n    return dispatch => {\n        dispatch(loginStart());\n        const authData = {\n            displayName,\n            password,\n        };\n        Axios.post('/login', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    const token = res.data.data.token;\n                    dispatch(loginSuccess(displayName, token));\n                    localStorage.setItem('tk', token);\n                    dispatch(getUser(token));\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(loginFail(errCode));\n                    dispatch(loginInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(loginFail(err));\n                dispatch(loginInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// (** User 스토어의 액션들) \n// /my-profile 페이지. 토큰받아서 GET /user/profile \nexport const getUserStart = () => {\n    return {\n        type: actionTypes.GET_USER_START,\n    }\n}\nexport const getUserSuccess = (profileImgSrc, adj, job, displayNameInUser, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount ) => {\n    return dispatch => {\n        console.log(profileImgSrc, adj, job, displayNameInUser, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount);\n        dispatch(addProfileImgSrc(profileImgSrc));\n        dispatch(addIsGraduate(isGraduate));\n        dispatch(addIsPublic(isPublic));\n        dispatch(addAdj(adj));\n        dispatch(addJob(job));\n        dispatch(addGender(gender));\n        dispatch(addDidsplayName(displayNameInUser));\n        dispatch(addUniv(university));\n        dispatch(addLocation(location));\n        dispatch(addAge(age));\n        dispatch(addResume(resume));\n        dispatch(addWorkPlace(workPlace));\n        dispatch(addIntroText(introText));\n        dispatch(addInterest(hashtagCount));\n        dispatch({type: actionTypes.GET_USER_SUCCESS});\n    }\n}\nexport const getUserFail = () => {\n    return {\n        type: actionTypes.GET_USER_FAIL,\n    }\n}\nexport const getUser = (token) => {\n    return dispatch => {\n        dispatch(getUserStart());\n            Axios.get('/user/profile', {\n                headers: {\n                    'access-token': `${token}`\n                }\n            })\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    const { profileImgSrc, adj, job, displayName, gender, university, isGraduate, isPublic, location, age, resume, workPlace,  introText, hashtagCount } = res.data.data;\n                    dispatch(getUserSuccess(profileImgSrc, adj, job, displayName, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount));\n                }else {\n                    dispatch(getUserFail());\n                    alert(\"죄송합니다 서버에 일시적인 오류가 발생했습니다. 잠시 후 다시 로그인해주세요.\");\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"죄송합니다 서버에 일시적인 오류가 발생했습니다. 잠시 후 다시 로그인해주세요.\");\n            })\n    }\n}\n\n"],"sourceRoot":""}