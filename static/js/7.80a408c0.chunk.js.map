{"version":3,"sources":["../node_modules/@material-ui/core/esm/styles/makeStyles.js","components/universitySwitcher.js","components/UI/validationButton.js","pages/Login.js","axios-instance.js","store/actions/Auth.js","store/actions/User.js"],"names":["makeStyles","stylesOrCreator","options","arguments","length","undefined","makeStylesWithoutDefault","_extends","defaultTheme","universitySwitcher","universityEng","useStyles","theme","root","margin","spacing","ValidationTextFields","classes","useState","email","setEmail","dispatch","useDispatch","isLoading","useSelector","store","auth","loading","emailRegex","textChangeHandler","useCallback","event","preventDefault","target","value","submitHandler","match","alert","index","indexOf","univ","slice","univKor","actions","className","noValidate","autoComplete","TextField","error","id","label","helperText","autoFocus","required","fullWidth","variant","onChange","e","style","height","left","color","red","green","blue","alpha","segmentWidth","onClick","Login","history","isEmailSent","isConfirmed","description","fontSize","textAlign","sendAgain","confirmAuth","useEffect","push","headerNone","footerNone","borderBottom","goBack","width","cursor","src","alt","padding","marginBottom","Axios","axios","create","baseURL","withCredentials","AxiosForCORS","headers","authFail","type","actionTypes","authData","post","then","res","console","log","isSuccess","data","success","authSuccess","catch","err","authConfirmFail","authConfirmInit","authConfirm","addAge","age","addGender","gender","addJob","job","addAdj","adj","addLocation","location","addArticleImgSrc","articleImgSrc","addArticleText","articleText","addInterest","interestArr","displayNameFail","displayNameInit","displayName","displayNameSuccess","addIntroText","introText","addProfileImgSrc","ProfileImgSrc","addInstagramId","instagramId","submitToServerFail","submitToServer","genderInRedux","ageInRedux","jobInRedux","adjInRedux","locationInRedux","articleImgSrcInRedux","articleTextInRedux","displayNameInRedux","interestArrInRedux","introTextInRedux","profileImgSrcInRedux","instagramIdInRedux","userData","updateProfileImgToServer","updatedProfileImg","updateProfileImg"],"mappings":"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","file":"static/js/7.80a408c0.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","\nfunction universitySwitcher({ universityEng }){\n    switch(universityEng) {\n        case 'korea.ac.kr':\n            return \"고려대학교\"\n        case 'yonsei.ac.kr':\n            return \"연세대학교\"\n        case 'snu.ac.kr':\n            return \"서울대학교\"\n        case 'sogang.ac.kr':\n            return \"서강대학교\"\n        case 'skky.ac.kr':\n            return \"성균관대학교\"\n        case 'hanyang.ac.kr':\n            return \"한양대학교\"\n        default:\n            return null\n    }\n}\n\nexport default universitySwitcher;","import React, { useCallback, useState, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LoadingIndicator from 'react-loading-indicator';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport universitySwitcher from '../universitySwitcher';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function ValidationTextFields() {\n  const classes = useStyles();\n  const [email, setEmail] = useState('');\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(store => store.auth.loading);\n\n  const emailRegex = /^[a-zA-Z0-9]([-_]?[a-zA-Z0-9])*@(korea.ac.kr|yonsei.ac.kr|snu.ac.kr|sogang.ac.kr|skky.edu|hanyang.ac.kr)$/;\n\n  const textChangeHandler = useCallback((event) => {\n    event.preventDefault();\n    setEmail(event.target.value);\n  }, []);\n\n  const submitHandler = useCallback((event) => {\n    event.preventDefault();\n    if(!email.match(emailRegex)) { // 먼저 필터링\n      event.preventDefault();\n      return alert('올바른 메일로 입력해주세요.');\n    }\n    const index = email.indexOf('@');\n    const univ = email.slice(index+1); // 영어\n    const univKor = universitySwitcher(univ); //한국말\n\n    // redux 스토어에 dispatch\n    dispatch(actions.auth(email, univKor));\n  }, [email]);\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n      <div className=\"w-full text-center mt-5\">\n        <TextField\n          error={!email.match(emailRegex)}\n          id=\"outlined-error-helper-text\"\n          label=\"학교 이메일 인증하기\"\n          helperText={!email.match(emailRegex) ? \"이메일을 올바르게 입력해주세요.\" : \"\"}\n          autoFocus\n          required\n          fullWidth={true}\n          variant=\"outlined\"\n          onChange={(e) => textChangeHandler(e)}\n        />\n      </div>\n      {isLoading ? (\n      <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n        <LoadingIndicator \n            color={{red: 0, green: 0, blue: 0, alpha: 1}}\n            segmentWidth={2}\n        />\n      </div>\n      ) : null}\n      <button onClick={(e) => submitHandler(e)} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-10 bg-black text-white hover:bg-gray-400 focus:outline-none\">\n        인증메일 전송\n      </button>\n    </form>\n  )\n}\n","import React, { useCallback, useEffect }  from 'react';\nimport Layout from '../components/layout';\nimport ValidationButton from '../components/UI/validationButton';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../store/actions/index';\nimport LoadingIndicator from 'react-loading-indicator';\n\nconst Login = ({ history }) => {\n    const isLoading = useSelector(store => store.auth.loading);\n    const isEmailSent = useSelector(store => store.auth.isEmailSent); //만약 토큰이 있으면 AUTH_SUCCESS 이므로\n    const isConfirmed = useSelector(store => store.auth.isConfirmed);\n    const email = useSelector(store => store.auth.email); \n    const univ = useSelector(store => store.auth.univ); \n    const dispatch = useDispatch();\n\n    let description = null;\n    if(isLoading === false) { //메일이 보내진거임. null에서 false 됐으니까\n        description = (\n            <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto'}}>\n                <strong style={{color: \"#4A87FF\"}}>{email}</strong> 메일로 전송되었습니다. 인증메일을 확인바랍니다. 인증 메일을 확인하시고 돌아오셔서 아래의 버튼을 눌러주세요!\n            </p>\n        )\n    }else {\n        description = (\n            <p style={{fontSize: '14px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto'}}>\n                이메일을 인증해주세요. <br/>연고링은 베타테스트단계로  <br/>서울대 고려대 연세대 서강대 한양대 성균관대 <br/> 학생들로만 진행중입니다. \n            </p>\n        )\n    }\n    \n    const sendAgain = useCallback((event) => {\n        event.preventDefault();\n        dispatch(actions.auth(email, univ));\n    }, [email]);\n\n    const confirmAuth = useCallback((event) => {\n        event.preventDefault();\n\n        dispatch(actions.authConfirm(email));\n    }, [email]);\n\n    useEffect(() => {\n        if(isConfirmed === true)\n            history.push('/setting/1')\n        else if(isConfirmed === false)\n            alert(\"메일에서 인증하기 버튼을 먼저 눌러주세요.\");\n        else\n            return null\n    }, [isConfirmed]);\n    \n    return (\n        <Layout headerNone footerNone={true}>\n            <nav style={{height: '60px', borderBottom: '1px solid #eee'}} className=\"flex flex-row items-center justify-between \">\n                <img\n                    onClick={() => history.goBack()} \n                    style={{width: '25px', height: '25px', cursor: 'pointer'}}\n                    src=\"/arrow-back-outline.svg\"\n                    alt=\"back\"\n                />\n            </nav>\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">이메일 인증</h1>\n                    {description}\n                </section>\n                <section className=\"px-10 mb-5\">\n                    {isEmailSent ? (\n                        <>\n                            {isLoading ? (\n                            <div style={{height: '30px', left: 'calc(50% - 10px)'}} className=\"absolute \">\n                                <LoadingIndicator \n                                    color={{red: 0, green: 0, blue: 0, alpha: 1}}\n                                    segmentWidth={2}\n                                />\n                            </div>\n                            ) : null}\n                            <button onClick={(e) => confirmAuth(e)} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-10 bg-black text-white  focus:outline-none\">\n                                인증한 뒤 눌러주세요!\n                            </button>\n                            <button onClick={(e) => sendAgain(e)} className=\"font-sans w-full border-2 rounded-2xl px-5 py-3 mt-3 bg-white text-black focus:outline-none \">\n                                인증메일 재전송\n                            </button>\n                        </>\n                    ) : (\n                        <ValidationButton />\n                    )}\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default Login;\n\n\n","import axios from 'axios';\n\nexport const Axios = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n    withCredentials: false,\n})\n\nexport const AxiosForCORS = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n    headers:{\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Accept': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n    }  \n})\n\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const authSuccess = (email, univKor) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        email: email,\n        univ: univKor\n    }\n}\n\nexport const authFail = () => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n    }\n}\n\nexport const errorInit = () => {\n    return {\n        type: actionTypes.ERROR_INIT\n    }\n}\n\nexport const auth = (email, univKor) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(authSuccess(email, univKor));\n                else\n                    dispatch(authFail());\n            })\n            .catch(err => {\n                console.log(err);\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n                dispatch(authFail(err));\n            })\n    }\n}\n\n// auth Confirm\nexport const authConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const authConfirmFail = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n    }\n}\nexport const authConfirmSuccess = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n    }\n}\nexport const authConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\nexport const authConfirm = (email) => {\n    return dispatch => {\n        dispatch(authConfirmStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess());\n                    dispatch(authConfirmInit());\n                }\n                else {\n                    dispatch(authConfirmFail());\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail());\n                dispatch(authConfirmInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n","import * as actionTypes from './actionTypes';\nimport { Axios, AxiosForCORS } from '../../axios-instance';\n\nexport const addAge = (age) => {\n    return {\n        type: actionTypes.ADD_AGE,\n        age,\n    }\n}\nexport const addGender = (gender) => {\n    return {\n        type: actionTypes.ADD_GENDER,\n        gender,\n    }\n}\n\nexport const addJob = (job) => {\n    return {\n        type: actionTypes.ADD_JOB,\n        job,\n    }\n}\n\nexport const addAdj = (adj) => {\n    return {\n        type: actionTypes.ADD_ADJ,\n        adj,\n    }\n}\n\nexport const addLocation = (location) => {\n    return {\n        type: actionTypes.ADD_LOCATION,\n        location,\n    }\n}\nexport const addArticleImgSrc = (articleImgSrc) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_IMGSRC,\n        articleImgSrc,\n    }\n}\n\nexport const addArticleText = (articleText) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_TEXT,\n        articleText,\n    }\n}\n\nexport const addInterest = (interestArr) => {\n    return {\n        type: actionTypes.ADD_INTEREST,\n        interestArr,\n    }\n}\n\n\n// displayName check\n\nexport const displayNameStart = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_START,\n    }\n}\nexport const displayNameSuccess = (displayName) => {\n    return {\n        type: actionTypes.DISPLAYNAME_SUCCESS,\n        displayName,\n    }\n}\nexport const displayNameFail = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_FAIL,\n    }\n}\nexport const displayNameInit = () => {\n    return {\n        type: actionTypes.DISPLAYNAME_INIT,\n    }\n}\n\nexport const displayName = (displayName) => {\n    return dispatch => {\n        dispatch(displayNameStart());\n\n        const data = {\n            displayName\n        }\n        Axios.post('/check/name', data)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess){ \n                    dispatch(displayNameSuccess(displayName));\n                }else {\n                    dispatch(displayNameFail());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(displayNameFail());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// -----\n\nexport const addIntroText = (introText) => {\n    return {\n        type: actionTypes.ADD_INTRO_TEXT,\n        introText,\n    }\n}\nexport const addProfileImgSrc = (ProfileImgSrc) => {\n    return {\n        type: actionTypes.ADD_PROFILE_IMG_SRC,\n        ProfileImgSrc\n    }\n}\n\nexport const addInstagramId = (instagramId) => {\n    return {\n        type: actionTypes.ADD_INSTA_ID,\n        instagramId\n    }\n}\n\n\n// SubmitToServer\nexport const submitToServerStart = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_START,\n    }\n}\n\nexport const submitToServerSuccess = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_SUCCESS,\n    }\n}\nexport const submitToServerFail = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\n\nexport const submitToServer = (genderInRedux, ageInRedux, jobInRedux, adjInRedux, locationInRedux, articleImgSrcInRedux, articleTextInRedux, displayNameInRedux, interestArrInRedux, introTextInRedux, profileImgSrcInRedux, instagramIdInRedux) => {\n    return dispatch => {\n        dispatch(submitToServerStart());\n        const userData = {\n            genderInRedux, \n            ageInRedux, \n            jobInRedux, \n            adjInRedux, \n            locationInRedux, \n            articleImgSrcInRedux, \n            articleTextInRedux, \n            displayNameInRedux, \n            interestArrInRedux, \n            introTextInRedux, \n            profileImgSrcInRedux, \n            instagramIdInRedux\n        };\n        console.log(ageInRedux);\n        AxiosForCORS.post('/pre/user', userData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(submitToServerSuccess());\n                else\n                    dispatch(submitToServerFail());\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitToServerFail());\n            })\n    }\n}\n\n\nexport const updateProfileImg = (updatedProfileImg) => {\n    return {\n        type: actionTypes.UPDATE_PROFILE_IMG,\n        updatedProfileImg,\n    }\n}\n\nexport const updateProfileImgToServer = (updatedProfileImg) => {\n    return dispatch => {\n        dispatch(updateProfileImg(updatedProfileImg));\n        // 서버에 보내기\n    }\n}\n"],"sourceRoot":""}