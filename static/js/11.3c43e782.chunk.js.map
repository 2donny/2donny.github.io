{"version":3,"sources":["components/UI/validationButton.js","pages/Auth/FindAuth.js","axios-instance.js","store/actions/User.js","store/actions/Auth.js","components/UI/backdrop.js","components/UI/modal.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","ValidationTextFields","confirmAuth","history","type","classes","useState","isBtnDisabled","setIsBtnDisabled","showModal","setShowModal","email","setEmail","dispatch","useDispatch","isLoading","useSelector","store","auth","loading","errCode","emailRegex","useEffect","textChangeHandler","useCallback","event","preventDefault","emailText","target","value","match","submitHandler","alert","actions","findSubmitHandler","className","noValidate","autoComplete","error","id","label","helperText","autoFocus","required","fullWidth","variant","onChange","e","style","height","position","left","top","transform","size","color","marginTop","fontSize","whiteSpace","onClick","padding","disabled","show","clicked","push","cursor","textAlign","FindAuth","headerNone","footerNone","borderBottom","goBack","width","marginLeft","src","alt","href","marginRight","marginBottom","Axios","axios","create","baseURL","addIsPublic","isPublic","actionTypes","addIsGraduate","isGraduate","addGender","gender","addAge","age","addJob","job","addAdj","adj","addLocation","location","lng","lat","addIntroText","introText","addInterest","interestArr","submitImgToAWSStart","submitImgToAWSSuccess","imgAwsUrl","payloadType","submitImgToAWSFail","submitImgToAWSInit","submitArticleImgToAWS","articleImg_formData","post","then","res","console","log","data","success","catch","err","submitProfileImgToAWS","profileImg_formData","addArticleText","articleText","addArticleTag","articleTag","submitToServerFail","submitToServerInit","submitToServer","phoneNumberInRedux","latitudeInRedux","longitudeInRedux","passwordInRedux","isPublicInRedux","isGraduateInRedux","emailInRedux","genderInRedux","ageInRedux","jobInRedux","adjInRedux","locationInRedux","articleImgSrcInRedux","articleTextInRedux","articleTagInRedux","displayNameInRedux","interestArrInRedux","introTextInRedux","profileImgSrcInRedux","resumeText","workPlaceText","userData","longitude","latitude","displayName","profileImgSrc","phoneNumber","resume","workPlace","password","articleImgSrc","message","updateProfileImgToServer","updatedProfileImg","updateProfileImg","authFail","errorInit","authData","authSuccess","code","errorMsg","authConfirmFail","authConfirmInit","authConfirm","univKor","univ","authConfirmSuccess","findAuthFail","findAuthInit","findAuth","joinFail","joinInit","joinSubmit","wpd","pwd","joinSuccess","loginFail","loginInit","loginSubmit","token","loginSuccess","localStorage","setItem","getUser","getUserSuccess","displayNameInUser","university","hashtagCount","addProfileImgSrc","addDidsplayName","addResume","addWorkPlace","get","headers","Backdrop","backgroundColor","Modal","children","visibility","borderRadius","zIndex","border","boxShadow","boxSizing","transition","opacity","memoizedModal","React","memo"],"mappings":"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","file":"static/js/11.3c43e782.chunk.js","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport Modal from './modal';\nimport Spinner from 'react-spinner-material';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function ValidationTextFields({ confirmAuth, history, type }) {\n    const classes = useStyles();\n    \n    const [isBtnDisabled, setIsBtnDisabled] = useState(true);\n    const [showModal, setShowModal] = useState(false);\n    const [email, setEmail] = useState('');\n    \n\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(store => store.auth.loading);\n    const errCode = useSelector(store => store.auth.errCode);\n    const emailRegex = /^[a-zA-Z0-9]([-_]?[a-zA-Z0-9])*@(korea.ac.kr|yonsei.ac.kr|snu.ac.kr|sogang.ac.kr|g.skku.edu|hanyang.ac.kr)$/;\n\n\n    useEffect(() => {\n      if(errCode === 0) {\n        setShowModal(true);\n      }\n    }, [errCode]);\n\n    const textChangeHandler = useCallback((event) => {\n      event.preventDefault();\n      const emailText = event.target.value;\n      setEmail(emailText);\n\n      if(emailText.match(emailRegex)) {\n        setIsBtnDisabled(false);\n      }else {\n        setIsBtnDisabled(true);\n      }\n    }, []);\n\n    const submitHandler = useCallback((event) => {\n      event.preventDefault();\n      if(!email.match(emailRegex)) { // 먼저 필터링\n        event.preventDefault();\n        return alert('올바른 메일로 입력해주세요.');\n      }\n      \n      dispatch(actions.auth(email));\n    }, [email]);\n\n    const findSubmitHandler = useCallback((event) => {\n      event.preventDefault();\n      if(!email.match(emailRegex)) { // 먼저 필터링\n        event.preventDefault();\n        return alert('올바른 메일로 입력해주세요.');\n      }\n      \n      // redux 스토어에 dispatch\n      dispatch(actions.findAuth(email));\n    }, [email]);\n    \n\n    return (\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <div className=\"w-full text-center mt-5\">\n          <TextField\n            error={!email.match(emailRegex)}\n            id=\"outlined-error-helper-text\"\n            label=\"학교 이메일\"\n            helperText={!email.match(emailRegex) ? \"이메일을 올바르게 입력해주세요.\" : \"\"}\n            autoFocus\n            required\n            fullWidth={true}\n            variant=\"outlined\"\n            onChange={(e) => textChangeHandler(e)}\n          />\n        </div>\n\n        {/* 로딩 인디케이터 */}\n        {isLoading ? (\n        <div style={{height: '40px', position: 'relative'}}>\n          <div style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, 0)'}} className=\"flex flex-col items-center\">\n              <Spinner \n                  size={10}\n                  color={\"#aaa\"}\n              />\n              <p style={{marginTop: 10, fontSize: 12, whiteSpace: 'pre', color: \"#8D8D8D\"}}>인증메일을 보내고있습니다</p>\n          </div>\n        </div>\n        ) : <div style={{height: '40px'}}></div>}\n\n        {/* 전송 버튼 */}\n        {type === 'auth' ? (\n        <button onClick={(e) => submitHandler(e)} style={{padding: \"15px 0\", margin: '80px 0 0'}} className=\"font-sans w-full rounded-lg bg-gray-400 text-white hover:bg-gray-400 focus:outline-none\">\n          인증확인 전송\n        </button>\n        ) : ( // type === 'find'\n        <button disabled={isBtnDisabled} onClick={(e) => findSubmitHandler(e)} style={{padding: \"15px 0\", margin: '80px 0 0'}} className=\"font-sans w-full rounded-lg mt-10 bg-gray-400 text-white hover:bg-gray-400 focus:outline-none\">\n          닉네임/비밀번호 찾기\n        </button>\n        )}\n\n        {/* 모달 */}\n        <Modal show={showModal} clicked={() => setShowModal(false)}>\n          <div className=\"py-5\">\n            <h1 className=\"text-xl mb-5\">이메일을 확인해주세요!</h1>\n            <p style={{color: '#aaa'}} className=\"text-base my-10\">이메일로 기존 닉네임과 비밀번호를 <br/> 전송해드렸습니다.</p>\n            <p onClick={() => history.push('/login')} style={{cursor: 'pointer'}} >로그인하러가기\u001d</p>\n          </div>\n        </Modal>\n        <div> {type === 'find' ? null : (\n          <p onClick={() => history.push('/login')} style={{color: \"#949393\", margin: '20px 0', textAlign: 'center', cursor: 'pointer'}}>로그인하러가기\u001d</p>)}\n        </div>\n      </form>\n    )\n}\n","import React, { useCallback, useEffect, useRef, useState }  from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Layout from '../../components/layout';\nimport * as actions from '../../store/actions/index';\nimport LoadingIndicator from 'react-loading-indicator';\nimport ValidationButton from '../../components/UI/validationButton';\n\nconst FindAuth = ({ history }) => {\n    return (\n        <Layout headerNone footerNone={true}>\n            <nav style={{height: '60px', borderBottom: '1px solid #eee'}} className=\"flex flex-row items-center justify-between \">\n                <img\n                    onClick={() => history.goBack()} \n                    style={{width: '25px', height: '25px', marginLeft: 10, cursor: 'pointer'}}\n                    src=\"/arrow-back-outline.svg\"\n                    alt=\"back\"\n                />\n                <a href='http://pf.kakao.com/_kDxhtK' style={{color: \"#949393\", cursor: 'pointer', marginRight: 30}}> 문의하기 </a>\n            </nav>\n\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">닉네임/비밀번호 찾기</h1>\n                    <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto'}}>가입하신 학교 이메일을 적어주세요. <br/> 이메일로 기존 닉네임과 비밀번호를 발송해드립니다.</p>\n                </section>\n                <section className=\"px-10 mb-5\">\n                    <section className=\"text-center my-10\">\n                        <ValidationButton history={history} type=\"find\"/>\n                    </section>\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default FindAuth;","import axios from 'axios';\n\nexport const Axios = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n})\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\n\n// GET시 /user/profile를 리덕스에 담기위한 액션.\nexport const addProfileImgSrc = (profileImgSrc) => {\n    return {\n        type: actionTypes.ADD_PROFILE_IMG_SRC,\n        profileImgSrc,\n    }\n}\nexport const addPhoneNumber = (phoneNumber) => {\n    return {\n        type: actionTypes.ADD_PHONE_NUMBER,\n        phoneNumber,\n    }\n}\nexport const addIsPublic = (isPublic) => {\n    return {\n        type: actionTypes.ADD_IS_PUBLIC,\n        isPublic,\n    }\n}\nexport const addIsGraduate = (isGraduate) => {\n    return {\n        type: actionTypes.ADD_IS_GRADUATE,\n        isGraduate,\n    }\n}\nexport const addDidsplayName = (displayNameInUser) => {\n    return {\n        type: actionTypes.ADD_DISPLAY_NAME,\n        displayNameInUser,\n    }\n}\nexport const addGender = (gender) => {\n    return {\n        type: actionTypes.ADD_GENDER,\n        gender,\n    }\n}\nexport const addUniv = (univ) => {\n    return {\n        type: actionTypes.ADD_UNIV,\n        univ,\n    }\n}\nexport const addAge = (age) => {\n    return {\n        type: actionTypes.ADD_AGE,\n        age,\n    }\n}\nexport const addJob = (job) => {\n    return {\n        type: actionTypes.ADD_JOB,\n        job,\n    }\n}\n\nexport const addAdj = (adj) => {\n    return {\n        type: actionTypes.ADD_ADJ,\n        adj,\n    }\n}\nexport const addLocation = (location, lng, lat) => {\n    return {\n        type: actionTypes.ADD_LOCATION,\n        location,\n        lng,\n        lat\n    }\n}\nexport const addResume = (resume) => {\n    return {\n        type: actionTypes.ADD_RESUME,\n        resume,\n    }\n}\nexport const addWorkPlace = (workPlace) => {\n    return {\n        type: actionTypes.ADD_WORKPLACE,\n        workPlace,\n    }\n}\nexport const addIntroText = (introText) => {\n    return {\n        type: actionTypes.ADD_INTRO_TEXT,\n        introText,\n    }\n}\nexport const addInterest = (interestArr) => {\n    return {\n        type: actionTypes.ADD_INTEREST,\n        interestArr,\n    }\n}\n\n// ArticleImg Submit to AWS S3\nexport const submitImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_START,\n        \n    }\n}\nexport const submitImgToAWSSuccess = (imgAwsUrl, payloadType) => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n        payloadType,\n    }\n}\nexport const submitImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_FAIL,\n    }\n}\nexport const submitImgToAWSInit = () => {\n    return {\n        type: actionTypes.SUBMIT_IMG_SRC_TO_AWS_INIT,\n    }\n}\n\nexport const submitArticleImgToAWS = (articleImg_formData, payloadType) => {\n    return dispatch => {\n        dispatch(submitImgToAWSStart());\n\n        Axios.post('/img', articleImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    console.log(payloadType)\n                    dispatch(submitImgToAWSSuccess(imgAwsUrl, payloadType))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitImgToAWSFail());\n                dispatch(submitImgToAWSInit())\n            })\n    }\n}\n// ----\n\n// Submit proflieImgSrc to AWS S3\nexport const submitProfileImgToAWS = (profileImg_formData, type) => {\n    return dispatch => {\n        dispatch(submitImgToAWSStart());\n\n        Axios.post('/img', profileImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitImgToAWSSuccess(imgAwsUrl, type))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {{\n                console.log(err);\n                dispatch(submitImgToAWSFail())\n            }})\n    }\n}\n// -----\n\nexport const addArticleText = (articleText) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_TEXT,\n        articleText,\n    }\n}\nexport const addArticleTag = (articleTag) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_HASHTAG,\n        articleTag,\n    }\n}\n\n\n\n\n// SubmitToServer\nexport const submitToServerStart = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_START,\n    }\n}\n\nexport const submitToServerSuccess = (resume, workPlace) => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_SUCCESS,\n        resume,\n        workPlace,\n    }\n}\nexport const submitToServerFail = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\nexport const submitToServerInit = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\nexport const submitToServer = (phoneNumberInRedux, latitudeInRedux, longitudeInRedux, passwordInRedux, isPublicInRedux, isGraduateInRedux, emailInRedux, genderInRedux, ageInRedux, jobInRedux, adjInRedux, locationInRedux, articleImgSrcInRedux, articleTextInRedux, articleTagInRedux, displayNameInRedux, interestArrInRedux, introTextInRedux, profileImgSrcInRedux, resumeText, workPlaceText) => {\n    return dispatch => {\n        dispatch(submitToServerStart());\n        const userData = {\n            gender: genderInRedux, \n            age: ageInRedux,\n            adj: adjInRedux, \n            job: jobInRedux, \n            location: locationInRedux, \n            longitude: longitudeInRedux,\n            latitude: latitudeInRedux,\n            displayName: displayNameInRedux, \n            profileImgSrc: profileImgSrcInRedux, \n            introText: introTextInRedux, \n            interestArr: interestArrInRedux, \n            phoneNumber: phoneNumberInRedux,\n            isPublic: isPublicInRedux,\n            isGraduate: isGraduateInRedux,\n            resume: resumeText,\n            workPlace: workPlaceText,\n            password: passwordInRedux,\n            email: emailInRedux,\n            articleImgSrc: articleImgSrcInRedux, \n            articleText: articleTextInRedux, \n            articleTag: articleTagInRedux,\n        };\n        Axios.post('/pre/user', userData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(submitToServerSuccess(resumeText, workPlaceText));\n                else {\n                    dispatch(submitToServerFail());\n                    dispatch(submitToServerInit());\n                    alert(res.data.message);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitToServerFail());\n                dispatch(submitToServerInit());\n                alert('일시적인 오류가 발생했습니다. 잠시후 다시 시도해주세요.');\n            })\n    }\n}\n\n\nexport const updateProfileImg = (updatedProfileImg) => {\n    return {\n        type: actionTypes.UPDATE_PROFILE_IMG,\n        updatedProfileImg,\n    }\n}\n\nexport const updateProfileImgToServer = (updatedProfileImg) => {\n    return dispatch => {\n        dispatch(updateProfileImg(updatedProfileImg));\n        // 서버에 보내기\n    }\n}\n","import * as actionTypes from './actionTypes';\nimport { addProfileImgSrc, addIsPublic, addIsGraduate, addDidsplayName, addAge, addGender, addJob, addAdj, addLocation, addResume, addWorkPlace, addInterest, addUniv, addIntroText, }  from '../actions/User';\nimport { Axios } from '../../axios-instance';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const authSuccess = (email) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        email: email,\n    }\n}\n\nexport const authFail = () => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n    }\n}\n\nexport const errorInit = () => {\n    return {\n        type: actionTypes.ERROR_INIT\n    }\n}\n// Auth page, 이메일 보내기\nexport const auth = (email) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(authSuccess(email));\n                else {\n                    const errCode = res.data.code;\n                    dispatch(authFail(errCode));\n                    dispatch(errorInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                const errorMsg = err.data.message;\n                alert(errorMsg);\n                dispatch(authFail(err));\n                dispatch(errorInit());\n            })\n    }\n}\n\n// Auth page, Confirm 하기\nexport const authConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const authConfirmFail = (errCode) => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n        errCode,\n    }\n}\nexport const authConfirmSuccess = (univKor) => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n        univ: univKor,\n    }\n}\nexport const authConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\nexport const authConfirm = (email, code, univKor) => {\n    console.log(univKor);\n    return dispatch => {\n        dispatch(authConfirmStart());\n        const authData = {\n            email,\n            code, \n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess(univKor));\n                    dispatch(authConfirmInit());\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(authConfirmFail(errCode));\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail(err.code));\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// 닉네임/비번찾기 페이지.\nexport const findAuthStart = () => {\n    return {\n        type: actionTypes.FIND_AUTH_START,\n    }\n}\nexport const findAuthSuccess = () => {\n    return {\n        type: actionTypes.FIND_AUTH_SUCCESS,\n    }\n}\nexport const findAuthFail = (errCode) => {\n    return {\n        type: actionTypes.FIND_AUTH_FAIL,\n        errCode,\n    }\n}\nexport const findAuthInit = () => {\n    return {\n        type: actionTypes.FIND_AUTH_INIT,\n    }\n}\nexport const findAuth = (email) => {\n    return dispatch => {\n        dispatch(findAuthStart());\n        const authData = {\n            email,\n        };\n        console.log(authData);\n        Axios.post('/find/info', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(findAuthSuccess());\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(findAuthFail(errCode));\n                    dispatch(findAuthInit());\n                    if(errCode == 457) {\n                        alert(\"가입되지 않은 이메일입니다.\")\n                    }else if(errCode === 451) {\n                        alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요');\n                    }\n                }\n            })\n            .catch(err => {\n                const errCode = err.data.code;\n                dispatch(findAuthFail(errCode));\n                dispatch(findAuthInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요');\n            })\n    }\n}\n\n// Start 페이지. 첫 회원가입 \nexport const joinStart = () => {\n    return {\n        type: actionTypes.JOIN_START,\n    }\n}\nexport const joinSuccess = (displayName, pwd, phoneNumber) => {\n    return {\n        type: actionTypes.JOIN_SUCCESS,\n        displayName,\n        pwd,\n        phoneNumber,\n    }\n}\nexport const joinFail = (errCode) => {\n    return {\n        type: actionTypes.JOIN_FAIL,\n        errCode,\n    }\n}\nexport const joinInit = () => {\n    return {\n        type: actionTypes.JOIN_INIT,\n    }\n}\nexport const joinSubmit = (displayName, wpd, phoneNumber) => {\n    return dispatch => {\n        dispatch(joinStart());\n        const authData = {\n            displayName,\n        };\n        console.log(authData);\n        Axios.post('/check/name', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(joinSuccess(displayName, wpd, phoneNumber));\n                }\n                else {\n                    const errCode = res.data.data;\n                    console.log(errCode);\n                    dispatch(joinFail(errCode));\n                    dispatch(joinInit());\n                }\n            })\n            .catch(err => {\n                const errCode = err;\n                dispatch(joinFail(errCode));\n                dispatch(joinInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// Login 페이지, submit 하기\nexport const loginStart = () => {\n    return {\n        type: actionTypes.LOGIN_START,\n    }\n}\nexport const loginFail = (error) => {\n    return {\n        type: actionTypes.LOGIN_FAIL,\n        error,\n    }\n}\nexport const loginSuccess = (displayName, token) => {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        displayName,\n        token,\n    }\n}\nexport const loginInit = () => {\n    return {\n        type: actionTypes.LOGIN_INIT,\n    }\n}\nexport const loginSubmit = (displayName, password) => {\n    return dispatch => {\n        dispatch(loginStart());\n        const authData = {\n            displayName,\n            password,\n        };\n        Axios.post('/login', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    const token = res.data.data.token;\n                    dispatch(loginSuccess(displayName, token));\n                    localStorage.setItem('tk', token);\n                    dispatch(getUser(token));\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(loginFail(errCode));\n                    dispatch(loginInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(loginFail(err));\n                dispatch(loginInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// (** User 스토어의 액션들) \n// /my-profile 페이지. 토큰받아서 GET /user/profile \nexport const getUserStart = () => {\n    return {\n        type: actionTypes.GET_USER_START,\n    }\n}\nexport const getUserSuccess = (profileImgSrc, adj, job, displayNameInUser, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount ) => {\n    return dispatch => {\n        console.log(profileImgSrc, adj, job, displayNameInUser, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount);\n        dispatch(addProfileImgSrc(profileImgSrc));\n        dispatch(addIsGraduate(isGraduate));\n        dispatch(addIsPublic(isPublic));\n        dispatch(addAdj(adj));\n        dispatch(addJob(job));\n        dispatch(addGender(gender));\n        dispatch(addDidsplayName(displayNameInUser));\n        dispatch(addUniv(university));\n        dispatch(addLocation(location));\n        dispatch(addAge(age));\n        dispatch(addResume(resume));\n        dispatch(addWorkPlace(workPlace));\n        dispatch(addIntroText(introText));\n        dispatch(addInterest(hashtagCount));\n        dispatch({type: actionTypes.GET_USER_SUCCESS});\n    }\n}\nexport const getUserFail = () => {\n    return {\n        type: actionTypes.GET_USER_FAIL,\n    }\n}\nexport const getUser = (token) => {\n    return dispatch => {\n        dispatch(getUserStart());\n            Axios.get('/user/profile', {\n                headers: {\n                    'access-token': `${token}`\n                }\n            })\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    const { profileImgSrc, adj, job, displayName, gender, university, isGraduate, isPublic, location, age, resume, workPlace,  introText, hashtagCount } = res.data.data;\n                    dispatch(getUserSuccess(profileImgSrc, adj, job, displayName, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount));\n                }else {\n                    dispatch(getUserFail());\n                    alert(\"죄송합니다 서버에 일시적인 오류가 발생했습니다. 잠시 후 다시 로그인해주세요.\");\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"죄송합니다 서버에 일시적인 오류가 발생했습니다. 잠시 후 다시 로그인해주세요.\");\n            })\n    }\n}\n\n","import React from 'react';\n\nfunction Backdrop({ show, clicked }) {\n    return (\n        show ? ( \n            <div \n                style={{backgroundColor: 'rgba(0, 0, 0, .7'}}\n                className=\"w-full h-full z-30 fixed left-0 top-0\" \n                onClick={clicked}\n            /> \n        )\n        : null\n    )\n}\n\nexport default Backdrop;","import React from 'react';\nimport Backdrop from './backdrop';\n\nlet memoizedModal = null;\n\nconst Modal = ({ children, show, clicked }) => {\n    return (\n        <div className=\"w-full\">\n            <Backdrop show={show} clicked={clicked}/>\n            <div className=\"w-full\">\n                <div \n                    style={{\n                        visibility: show ? 'visible' :'hidden',\n                        borderRadius: '10px',\n                        position: \"fixed\",\n                        zIndex: 500,\n                        width: '340px',\n                        textAlign: 'center',\n                        border: '1px solid #ccc',\n                        boxShadow: '1px 1px 1px black',\n                        backgroundColor: 'white',\n                        padding: '36px',\n                        left: `calc(50% - 170px)`,\n                        top: '30%',\n                        boxSizing: 'border-box',\n                        transition: 'all .3s ease-out',\n                        transform: show ? 'scale(1)' : 'scale(0.5)',\n                        opacity: show ? '1' : '0'\n                    }}\n                >\n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default memoizedModal = React.memo(Modal);\n"],"sourceRoot":""}