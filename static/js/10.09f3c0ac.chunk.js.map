{"version":3,"sources":["components/UI/validationButton.js","../node_modules/hyphenate-style-name/index.js","components/universitySwitcher.js","pages/Auth/Auth.js","axios-instance.js","store/actions/User.js","store/actions/Auth.js","components/UI/backdrop.js","components/UI/modal.js"],"names":["useStyles","makeStyles","theme","root","margin","spacing","ValidationTextFields","confirmAuth","history","type","classes","useState","isBtnDisabled","setIsBtnDisabled","showModal","setShowModal","email","setEmail","dispatch","useDispatch","isLoading","useSelector","store","auth","loading","errCode","emailRegex","useEffect","textChangeHandler","useCallback","event","preventDefault","emailText","target","value","match","submitHandler","alert","actions","findSubmitHandler","className","noValidate","autoComplete","error","id","label","helperText","autoFocus","required","fullWidth","variant","onChange","e","style","height","position","left","top","transform","size","color","marginTop","fontSize","whiteSpace","onClick","padding","disabled","show","clicked","push","cursor","textAlign","uppercasePattern","msPattern","cache","toHyphenLower","toLowerCase","hyphenateStyleName","name","hasOwnProperty","hName","replace","test","universitySwitcher","universityEng","Auth","isEmailSent","errCodeInRedux","emailInRedux","univInRedux","univ","passwordRef","useRef","description","sendAgain","console","log","index","indexOf","slice","univKor","code","current","headerNone","footerNone","marginBottom","ref","width","placeholder","backgroundColor","href","display","Axios","axios","create","baseURL","addIsPublic","isPublic","actionTypes","addIsGraduate","isGraduate","addGender","gender","addAge","age","addJob","job","addAdj","adj","addLocation","location","lng","lat","addIntroText","introText","addInterest","interestArr","submitImgToAWSStart","submitImgToAWSSuccess","imgAwsUrl","payloadType","submitImgToAWSFail","submitImgToAWSInit","submitArticleImgToAWS","articleImg_formData","post","then","res","data","success","catch","err","submitProfileImgToAWS","profileImg_formData","addArticleText","articleText","addArticleTag","articleTag","submitToServerFail","submitToServerInit","submitToServer","phoneNumberInRedux","latitudeInRedux","longitudeInRedux","passwordInRedux","isPublicInRedux","isGraduateInRedux","genderInRedux","ageInRedux","jobInRedux","adjInRedux","locationInRedux","articleImgSrcInRedux","articleTextInRedux","articleTagInRedux","displayNameInRedux","interestArrInRedux","introTextInRedux","profileImgSrcInRedux","resumeText","workPlaceText","userData","longitude","latitude","displayName","profileImgSrc","phoneNumber","resume","workPlace","password","articleImgSrc","message","updateProfileImgToServer","updatedProfileImg","updateProfileImg","authFail","errorInit","authData","authSuccess","errorMsg","authConfirmFail","authConfirmInit","authConfirm","authConfirmSuccess","findAuthFail","findAuthInit","findAuth","joinFail","joinInit","joinSubmit","wpd","pwd","joinSuccess","loginFail","loginInit","loginSubmit","token","loginSuccess","localStorage","setItem","getUser","getUserSuccess","displayNameInUser","university","hashtagCount","addProfileImgSrc","addDidsplayName","addResume","addWorkPlace","get","headers","Backdrop","Modal","children","visibility","borderRadius","zIndex","border","boxShadow","boxSizing","transition","opacity","memoizedModal","React","memo"],"mappings":"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","file":"static/js/10.09f3c0ac.chunk.js","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport Modal from './modal';\nimport Spinner from 'react-spinner-material';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n    },\n  },\n}));\n\nexport default function ValidationTextFields({ confirmAuth, history, type }) {\n    const classes = useStyles();\n    \n    const [isBtnDisabled, setIsBtnDisabled] = useState(true);\n    const [showModal, setShowModal] = useState(false);\n    const [email, setEmail] = useState('');\n    \n\n    const dispatch = useDispatch();\n\n    const isLoading = useSelector(store => store.auth.loading);\n    const errCode = useSelector(store => store.auth.errCode);\n    const emailRegex = /^[a-zA-Z0-9]([-_]?[a-zA-Z0-9])*@(korea.ac.kr|yonsei.ac.kr|snu.ac.kr|sogang.ac.kr|g.skku.edu|hanyang.ac.kr)$/;\n\n\n    useEffect(() => {\n      if(errCode === 0) {\n        setShowModal(true);\n      }\n    }, [errCode]);\n\n    const textChangeHandler = useCallback((event) => {\n      event.preventDefault();\n      const emailText = event.target.value;\n      setEmail(emailText);\n\n      if(emailText.match(emailRegex)) {\n        setIsBtnDisabled(false);\n      }else {\n        setIsBtnDisabled(true);\n      }\n    }, []);\n\n    const submitHandler = useCallback((event) => {\n      event.preventDefault();\n      if(!email.match(emailRegex)) { // 먼저 필터링\n        event.preventDefault();\n        return alert('올바른 메일로 입력해주세요.');\n      }\n      \n      dispatch(actions.auth(email));\n    }, [email]);\n\n    const findSubmitHandler = useCallback((event) => {\n      event.preventDefault();\n      if(!email.match(emailRegex)) { // 먼저 필터링\n        event.preventDefault();\n        return alert('올바른 메일로 입력해주세요.');\n      }\n      \n      // redux 스토어에 dispatch\n      dispatch(actions.findAuth(email));\n    }, [email]);\n    \n\n    return (\n      <form className={classes.root} noValidate autoComplete=\"off\">\n        <div className=\"w-full text-center mt-5\">\n          <TextField\n            error={!email.match(emailRegex)}\n            id=\"outlined-error-helper-text\"\n            label=\"학교 이메일\"\n            helperText={!email.match(emailRegex) ? \"이메일을 올바르게 입력해주세요.\" : \"\"}\n            autoFocus\n            required\n            fullWidth={true}\n            variant=\"outlined\"\n            onChange={(e) => textChangeHandler(e)}\n          />\n        </div>\n\n        {/* 로딩 인디케이터 */}\n        {isLoading ? (\n        <div style={{height: '40px', position: 'relative'}}>\n          <div style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, 0)'}} className=\"flex flex-col items-center\">\n              <Spinner \n                  size={10}\n                  color={\"#aaa\"}\n              />\n              <p style={{marginTop: 10, fontSize: 12, whiteSpace: 'pre', color: \"#8D8D8D\"}}>인증메일을 보내고있습니다</p>\n          </div>\n        </div>\n        ) : <div style={{height: '40px'}}></div>}\n\n        {/* 전송 버튼 */}\n        {type === 'auth' ? (\n        <button onClick={(e) => submitHandler(e)} style={{padding: \"15px 0\", margin: '80px 0 0'}} className=\"font-sans w-full rounded-lg bg-gray-400 text-white hover:bg-gray-400 focus:outline-none\">\n          인증확인 전송\n        </button>\n        ) : ( // type === 'find'\n        <button disabled={isBtnDisabled} onClick={(e) => findSubmitHandler(e)} style={{padding: \"15px 0\", margin: '80px 0 0'}} className=\"font-sans w-full rounded-lg mt-10 bg-gray-400 text-white hover:bg-gray-400 focus:outline-none\">\n          닉네임/비밀번호 찾기\n        </button>\n        )}\n\n        {/* 모달 */}\n        <Modal show={showModal} clicked={() => setShowModal(false)}>\n          <div className=\"py-5\">\n            <h1 className=\"text-xl mb-5\">이메일을 확인해주세요!</h1>\n            <p style={{color: '#aaa'}} className=\"text-base my-10\">이메일로 기존 닉네임과 비밀번호를 <br/> 전송해드렸습니다.</p>\n            <p onClick={() => history.push('/login')} style={{cursor: 'pointer'}} >로그인하러가기\u001d</p>\n          </div>\n        </Modal>\n        <div> {type === 'find' ? null : (\n          <p onClick={() => history.push('/login')} style={{color: \"#949393\", margin: '20px 0', textAlign: 'center', cursor: 'pointer'}}>로그인하러가기\u001d</p>)}\n        </div>\n      </form>\n    )\n}\n","/* eslint-disable no-var, prefer-template */\nvar uppercasePattern = /[A-Z]/g\nvar msPattern = /^ms-/\nvar cache = {}\n\nfunction toHyphenLower(match) {\n  return '-' + match.toLowerCase()\n}\n\nfunction hyphenateStyleName(name) {\n  if (cache.hasOwnProperty(name)) {\n    return cache[name]\n  }\n\n  var hName = name.replace(uppercasePattern, toHyphenLower)\n  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)\n}\n\nexport default hyphenateStyleName\n","\nfunction universitySwitcher(universityEng){\n    switch(universityEng) {\n        case 'korea.ac.kr':\n            return \"고려대학교\"\n        case 'yonsei.ac.kr':\n            return \"연세대학교\"\n        case 'snu.ac.kr':\n            return \"서울대학교\"\n        case 'sogang.ac.kr':\n            return \"서강대학교\"\n        case 'skky.ac.kr':\n            return \"성균관대학교\"\n        case 'hanyang.ac.kr':\n            return \"한양대학교\"\n        default:\n            return null\n    }\n}\n\nexport default universitySwitcher;","import React, { useCallback, useEffect, useState, useRef }  from 'react';\nimport Layout from '../../components/layout';\nimport ValidationButton from '../../components/UI/validationButton';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport Spinner from 'react-spinner-material';\nimport universitySwitcher from '../../components/universitySwitcher';\n\nconst Auth = ({ history }) => {\n    const isLoading = useSelector(store => store.auth.loading);\n    const isEmailSent = useSelector(store => store.auth.isEmailSent); //만약 토큰이 있으면 AUTH_SUCCESS 이므로\n    const errCodeInRedux = useSelector(store => store.auth.errCode);\n    const emailInRedux = useSelector(store => store.auth.email); \n    const univInRedux = useSelector(store => store.auth.univ); \n    const dispatch = useDispatch();\n\n    const passwordRef = useRef();\n\n    let description = null;\n    if(isLoading === false) { //메일이 보내진거임. null에서 false 됐으니까\n        description = (\n            <p style={{fontSize: '15px', color: \"#C5C1C1\", textAlign: 'left', whiteSpace: 'preline', margin: '20px auto'}}>\n                <strong style={{color: \"#4A87FF\"}}>{emailInRedux}</strong> 메일로 인증번호가 전송되었습니다. 이메일로 받은 인증번호를 입력해주세요. 이메일을 다시 입력하시려면 새로고침 해주세요.\n            </p>\n        )\n    }else {\n        if(isEmailSent === null || isLoading === true) { //맨 처음에만 보이게\n            description = (\n                <p style={{fontSize: '14px', color: \"#C5C1C1\", textAlign: 'left', margin: '20px auto'}}>\n                    이메일을 인증해주세요. <br/>연고링은 베타테스트단계로  <br/>서울대 고려대 연세대 서강대 한양대 성균관대 <br/> 학생들로만 진행중입니다. \n                </p>\n            )\n        }\n    }\n\n    \n    const sendAgain = useCallback((event) => {\n        event.preventDefault();\n        dispatch(actions.auth(emailInRedux, univInRedux));\n    }, [emailInRedux]);\n\n    // POST /email \n    const confirmAuth = useCallback((event) => {\n        event.preventDefault();\n        console.log(emailInRedux);\n        \n        const index = emailInRedux.indexOf('@');\n        const univ = emailInRedux.slice(index+1); // 영어\n        const univKor = universitySwitcher(univ); //한국말\n\n        const code = passwordRef.current.value;\n        dispatch(actions.authConfirm(emailInRedux, code, univKor));\n    }, [emailInRedux]);\n\n    \n    // POST /check/email 에서만 실행됨.\n    useEffect(() => {\n        if(errCodeInRedux === 0) { // SUCCESS 시 실행\n            history.push('/start')\n        }\n        else if(errCodeInRedux === 450) {\n            alert(\"이미 가입된 이메일입니다. 로그인 해주세요.\");\n            history.push('/login')\n        }\n        else if(errCodeInRedux === 453) {\n            alert(\"인증번호가 일치하지 않습니다. 보안상의 이유로 이전 인증번호는 더이상 유효하지 않으니 인증메일을 재전송해주세요.\")\n        }else if(errCodeInRedux === 500){\n            alert(\"네트워크에 일시적인 오류가 생겼습니다. 잠시 후 다시 시도해주세요.\")\n        }\n    }, [errCodeInRedux]);\n    \n    return (\n        <Layout headerNone footerNone={true}>\n            <div style={{height: '60px'}} className=\"flex flex-row items-center justify-between \"></div>\n            <section className=\"mb-10\">\n                <section style={{padding: '10px 30px'}} className=\"text-center mt-5\">\n                    <h1 style={{textAlign: 'left', marginBottom: '5px', fontSize: '24px'}} className=\"text-2xl text-left\">{isEmailSent ? '인증번호 입력' : '이메일 인증'}</h1>\n                    {description}\n                </section>\n                <section className=\"px-10 mb-5\">\n                    {isEmailSent ? (\n                        <>\n                            <div style={{marginTop: 30}}>\n                                <input \n                                    type=\"password\"\n                                    ref={passwordRef}\n                                    style={{width: '90%'}}\n                                    placeholder=\"인증번호입력\u001c\"\n                                    className=\"bg-gray-100 px-5 py-5\"\n                                />\n                            </div>\n                            {isLoading ? (\n                            <div style={{height: '90px'}} className=\"relative\">\n                                <div style={{position: 'absolute', left: '50%', top: '30%', transform: 'translate(-50%, 0)'}}>\n                                    <Spinner\n                                        size={5}\n                                        color={\"#aaa\"}\n                                    />\n                                </div>\n                            </div> ) : <div style={{height: '90px'}}></div>}\n                            <button onClick={(e) => confirmAuth(e)} style={{backgroundColor: \"#979B9F\"}} className=\"font-sans w-full rounded-lg px-5 py-3 text-white  focus:outline-none\">\n                                확인\n                            </button>\n                            <button onClick={(e) => sendAgain(e)} style={{color: \"#949393\", backgroundColor: \"#F7F7FA\"}} className=\"font-sans w-full border-2 rounded-lg px-5 py-3 mt-5 focus:outline-none \">\n                                인증메일 재전송\n                            </button>\n                            <a href=\"http://pf.kakao.com/_kDxhtK\" style={{color: \"#949393\", display: 'block', margin: '30px', textAlign: 'center'}}>인증이 안되시나요?</a>\n                        </>\n                    ) : (\n                        <ValidationButton confirmAuth={confirmAuth} type=\"auth\" history={history}/>\n                    )}\n                </section>\n            </section>\n        </Layout>\n    )\n}\n\nexport default Auth;\n\n\n","import axios from 'axios';\n\nexport const Axios = axios.create({\n    baseURL: 'https://ykring.herokuapp.com',\n})\n","import * as actionTypes from './actionTypes';\nimport { Axios } from '../../axios-instance';\n\n\n// GET시 /user/profile를 리덕스에 담기위한 액션.\nexport const addProfileImgSrc = (profileImgSrc) => {\n    return {\n        type: actionTypes.ADD_PROFILE_IMG_SRC,\n        profileImgSrc,\n    }\n}\nexport const addPhoneNumber = (phoneNumber) => {\n    return {\n        type: actionTypes.ADD_PHONE_NUMBER,\n        phoneNumber,\n    }\n}\nexport const addIsPublic = (isPublic) => {\n    return {\n        type: actionTypes.ADD_IS_PUBLIC,\n        isPublic,\n    }\n}\nexport const addIsGraduate = (isGraduate) => {\n    return {\n        type: actionTypes.ADD_IS_GRADUATE,\n        isGraduate,\n    }\n}\nexport const addDidsplayName = (displayNameInUser) => {\n    return {\n        type: actionTypes.ADD_DISPLAY_NAME,\n        displayNameInUser,\n    }\n}\nexport const addGender = (gender) => {\n    return {\n        type: actionTypes.ADD_GENDER,\n        gender,\n    }\n}\nexport const addUniv = (univ) => {\n    return {\n        type: actionTypes.ADD_UNIV,\n        univ,\n    }\n}\nexport const addAge = (age) => {\n    return {\n        type: actionTypes.ADD_AGE,\n        age,\n    }\n}\nexport const addJob = (job) => {\n    return {\n        type: actionTypes.ADD_JOB,\n        job,\n    }\n}\n\nexport const addAdj = (adj) => {\n    return {\n        type: actionTypes.ADD_ADJ,\n        adj,\n    }\n}\nexport const addLocation = (location, lng, lat) => {\n    return {\n        type: actionTypes.ADD_LOCATION,\n        location,\n        lng,\n        lat\n    }\n}\nexport const addResume = (resume) => {\n    return {\n        type: actionTypes.ADD_RESUME,\n        resume,\n    }\n}\nexport const addWorkPlace = (workPlace) => {\n    return {\n        type: actionTypes.ADD_WORKPLACE,\n        workPlace,\n    }\n}\nexport const addIntroText = (introText) => {\n    return {\n        type: actionTypes.ADD_INTRO_TEXT,\n        introText,\n    }\n}\nexport const addInterest = (interestArr) => {\n    return {\n        type: actionTypes.ADD_INTEREST,\n        interestArr,\n    }\n}\n\n// ArticleImg Submit to AWS S3\nexport const submitImgToAWSStart = () => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_START,\n        \n    }\n}\nexport const submitImgToAWSSuccess = (imgAwsUrl, payloadType) => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_SUCCESS,\n        imgAwsUrl,\n        payloadType,\n    }\n}\nexport const submitImgToAWSFail = () => {\n    return {\n        type: actionTypes.SUBMIT_IMGSRC_TO_AWS_FAIL,\n    }\n}\nexport const submitImgToAWSInit = () => {\n    return {\n        type: actionTypes.SUBMIT_IMG_SRC_TO_AWS_INIT,\n    }\n}\n\nexport const submitArticleImgToAWS = (articleImg_formData, payloadType) => {\n    return dispatch => {\n        dispatch(submitImgToAWSStart());\n\n        Axios.post('/img', articleImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    console.log(payloadType)\n                    dispatch(submitImgToAWSSuccess(imgAwsUrl, payloadType))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitImgToAWSFail());\n                dispatch(submitImgToAWSInit())\n            })\n    }\n}\n// ----\n\n// Submit proflieImgSrc to AWS S3\nexport const submitProfileImgToAWS = (profileImg_formData, type) => {\n    return dispatch => {\n        dispatch(submitImgToAWSStart());\n\n        Axios.post('/img', profileImg_formData)\n            .then(res => {\n                console.log(res);\n                const imgAwsUrl = res.data.data;\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(submitImgToAWSSuccess(imgAwsUrl, type))\n                    dispatch(submitImgToAWSInit())\n                }else {\n                    dispatch(submitImgToAWSFail())\n                    dispatch(submitImgToAWSInit())\n                }\n            })\n            .catch(err => {{\n                console.log(err);\n                dispatch(submitImgToAWSFail())\n            }})\n    }\n}\n// -----\n\nexport const addArticleText = (articleText) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_TEXT,\n        articleText,\n    }\n}\nexport const addArticleTag = (articleTag) => {\n    return {\n        type: actionTypes.ADD_ARTICLE_HASHTAG,\n        articleTag,\n    }\n}\n\n\n\n\n// SubmitToServer\nexport const submitToServerStart = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_START,\n    }\n}\n\nexport const submitToServerSuccess = (resume, workPlace) => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_SUCCESS,\n        resume,\n        workPlace,\n    }\n}\nexport const submitToServerFail = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\nexport const submitToServerInit = () => {\n    return {\n        type: actionTypes.SUBMIT_TO_SERVER_FAIL,\n    }\n}\nexport const submitToServer = (phoneNumberInRedux, latitudeInRedux, longitudeInRedux, passwordInRedux, isPublicInRedux, isGraduateInRedux, emailInRedux, genderInRedux, ageInRedux, jobInRedux, adjInRedux, locationInRedux, articleImgSrcInRedux, articleTextInRedux, articleTagInRedux, displayNameInRedux, interestArrInRedux, introTextInRedux, profileImgSrcInRedux, resumeText, workPlaceText) => {\n    return dispatch => {\n        dispatch(submitToServerStart());\n        const userData = {\n            gender: genderInRedux, \n            age: ageInRedux,\n            adj: adjInRedux, \n            job: jobInRedux, \n            location: locationInRedux, \n            longitude: longitudeInRedux,\n            latitude: latitudeInRedux,\n            displayName: displayNameInRedux, \n            profileImgSrc: profileImgSrcInRedux, \n            introText: introTextInRedux, \n            interestArr: interestArrInRedux, \n            phoneNumber: phoneNumberInRedux,\n            isPublic: isPublicInRedux,\n            isGraduate: isGraduateInRedux,\n            resume: resumeText,\n            workPlace: workPlaceText,\n            password: passwordInRedux,\n            email: emailInRedux,\n            articleImgSrc: articleImgSrcInRedux, \n            articleText: articleTextInRedux, \n            articleTag: articleTagInRedux,\n        };\n        Axios.post('/pre/user', userData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(submitToServerSuccess(resumeText, workPlaceText));\n                else {\n                    dispatch(submitToServerFail());\n                    dispatch(submitToServerInit());\n                    alert(res.data.message);\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(submitToServerFail());\n                dispatch(submitToServerInit());\n                alert('일시적인 오류가 발생했습니다. 잠시후 다시 시도해주세요.');\n            })\n    }\n}\n\n\nexport const updateProfileImg = (updatedProfileImg) => {\n    return {\n        type: actionTypes.UPDATE_PROFILE_IMG,\n        updatedProfileImg,\n    }\n}\n\nexport const updateProfileImgToServer = (updatedProfileImg) => {\n    return dispatch => {\n        dispatch(updateProfileImg(updatedProfileImg));\n        // 서버에 보내기\n    }\n}\n","import * as actionTypes from './actionTypes';\nimport { addProfileImgSrc, addIsPublic, addIsGraduate, addDidsplayName, addAge, addGender, addJob, addAdj, addLocation, addResume, addWorkPlace, addInterest, addUniv, addIntroText, }  from '../actions/User';\nimport { Axios } from '../../axios-instance';\n\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START,\n    }\n}\n\nexport const authSuccess = (email) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        email: email,\n    }\n}\n\nexport const authFail = () => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n    }\n}\n\nexport const errorInit = () => {\n    return {\n        type: actionTypes.ERROR_INIT\n    }\n}\n// Auth page, 이메일 보내기\nexport const auth = (email) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email\n        };\n        Axios.post('/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess)\n                    dispatch(authSuccess(email));\n                else {\n                    const errCode = res.data.code;\n                    dispatch(authFail(errCode));\n                    dispatch(errorInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                const errorMsg = err.data.message;\n                alert(errorMsg);\n                dispatch(authFail(err));\n                dispatch(errorInit());\n            })\n    }\n}\n\n// Auth page, Confirm 하기\nexport const authConfirmStart = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_START,\n    }\n}\nexport const authConfirmFail = (errCode) => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_FAIL,\n        errCode,\n    }\n}\nexport const authConfirmSuccess = (univKor) => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_SUCCESS,\n        univ: univKor,\n    }\n}\nexport const authConfirmInit = () => {\n    return {\n        type: actionTypes.AUTH_CONFIRM_INIT,\n    }\n}\n\nexport const authConfirm = (email, code, univKor) => {\n    console.log(univKor);\n    return dispatch => {\n        dispatch(authConfirmStart());\n        const authData = {\n            email,\n            code, \n        };\n        Axios.post('/check/email', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(authConfirmSuccess(univKor));\n                    dispatch(authConfirmInit());\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(authConfirmFail(errCode));\n                    dispatch(authConfirmInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(authConfirmFail(err.code));\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// 닉네임/비번찾기 페이지.\nexport const findAuthStart = () => {\n    return {\n        type: actionTypes.FIND_AUTH_START,\n    }\n}\nexport const findAuthSuccess = () => {\n    return {\n        type: actionTypes.FIND_AUTH_SUCCESS,\n    }\n}\nexport const findAuthFail = (errCode) => {\n    return {\n        type: actionTypes.FIND_AUTH_FAIL,\n        errCode,\n    }\n}\nexport const findAuthInit = () => {\n    return {\n        type: actionTypes.FIND_AUTH_INIT,\n    }\n}\nexport const findAuth = (email) => {\n    return dispatch => {\n        dispatch(findAuthStart());\n        const authData = {\n            email,\n        };\n        console.log(authData);\n        Axios.post('/find/info', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(findAuthSuccess());\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(findAuthFail(errCode));\n                    dispatch(findAuthInit());\n                    if(errCode == 457) {\n                        alert(\"가입되지 않은 이메일입니다.\")\n                    }else if(errCode === 451) {\n                        alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요');\n                    }\n                }\n            })\n            .catch(err => {\n                const errCode = err.data.code;\n                dispatch(findAuthFail(errCode));\n                dispatch(findAuthInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 잠시 후에 다시 시도해주세요');\n            })\n    }\n}\n\n// Start 페이지. 첫 회원가입 \nexport const joinStart = () => {\n    return {\n        type: actionTypes.JOIN_START,\n    }\n}\nexport const joinSuccess = (displayName, pwd, phoneNumber) => {\n    return {\n        type: actionTypes.JOIN_SUCCESS,\n        displayName,\n        pwd,\n        phoneNumber,\n    }\n}\nexport const joinFail = (errCode) => {\n    return {\n        type: actionTypes.JOIN_FAIL,\n        errCode,\n    }\n}\nexport const joinInit = () => {\n    return {\n        type: actionTypes.JOIN_INIT,\n    }\n}\nexport const joinSubmit = (displayName, wpd, phoneNumber) => {\n    return dispatch => {\n        dispatch(joinStart());\n        const authData = {\n            displayName,\n        };\n        console.log(authData);\n        Axios.post('/check/name', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    dispatch(joinSuccess(displayName, wpd, phoneNumber));\n                }\n                else {\n                    const errCode = res.data.data;\n                    console.log(errCode);\n                    dispatch(joinFail(errCode));\n                    dispatch(joinInit());\n                }\n            })\n            .catch(err => {\n                const errCode = err;\n                dispatch(joinFail(errCode));\n                dispatch(joinInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// Login 페이지, submit 하기\nexport const loginStart = () => {\n    return {\n        type: actionTypes.LOGIN_START,\n    }\n}\nexport const loginFail = (error) => {\n    return {\n        type: actionTypes.LOGIN_FAIL,\n        error,\n    }\n}\nexport const loginSuccess = (displayName, token) => {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        displayName,\n        token,\n    }\n}\nexport const loginInit = () => {\n    return {\n        type: actionTypes.LOGIN_INIT,\n    }\n}\nexport const loginSubmit = (displayName, password) => {\n    return dispatch => {\n        dispatch(loginStart());\n        const authData = {\n            displayName,\n            password,\n        };\n        Axios.post('/login', authData)\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    const token = res.data.data.token;\n                    dispatch(loginSuccess(displayName, token));\n                    localStorage.setItem('tk', token);\n                    dispatch(getUser(token));\n                }else {\n                    const errCode = res.data.code;\n                    console.log(errCode);\n                    dispatch(loginFail(errCode));\n                    dispatch(loginInit());\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                dispatch(loginFail(err));\n                dispatch(loginInit());\n                alert('네트워크 혹은 서버에 일시적인 오류가 있습니다. 다시 시도해주세요');\n            })\n    }\n}\n\n// (** User 스토어의 액션들) \n// /my-profile 페이지. 토큰받아서 GET /user/profile \nexport const getUserStart = () => {\n    return {\n        type: actionTypes.GET_USER_START,\n    }\n}\nexport const getUserSuccess = (profileImgSrc, adj, job, displayNameInUser, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount ) => {\n    return dispatch => {\n        console.log(profileImgSrc, adj, job, displayNameInUser, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount);\n        dispatch(addProfileImgSrc(profileImgSrc));\n        dispatch(addIsGraduate(isGraduate));\n        dispatch(addIsPublic(isPublic));\n        dispatch(addAdj(adj));\n        dispatch(addJob(job));\n        dispatch(addGender(gender));\n        dispatch(addDidsplayName(displayNameInUser));\n        dispatch(addUniv(university));\n        dispatch(addLocation(location));\n        dispatch(addAge(age));\n        dispatch(addResume(resume));\n        dispatch(addWorkPlace(workPlace));\n        dispatch(addIntroText(introText));\n        dispatch(addInterest(hashtagCount));\n        dispatch({type: actionTypes.GET_USER_SUCCESS});\n    }\n}\nexport const getUserFail = () => {\n    return {\n        type: actionTypes.GET_USER_FAIL,\n    }\n}\nexport const getUser = (token) => {\n    return dispatch => {\n        dispatch(getUserStart());\n            Axios.get('/user/profile', {\n                headers: {\n                    'access-token': `${token}`\n                }\n            })\n            .then(res => {\n                console.log(res);\n                const isSuccess = res.data.success;\n                if(isSuccess) {\n                    const { profileImgSrc, adj, job, displayName, gender, university, isGraduate, isPublic, location, age, resume, workPlace,  introText, hashtagCount } = res.data.data;\n                    dispatch(getUserSuccess(profileImgSrc, adj, job, displayName, gender, university, isGraduate, isPublic, location, age, resume, workPlace, introText, hashtagCount));\n                }else {\n                    dispatch(getUserFail());\n                    alert(\"죄송합니다 서버에 일시적인 오류가 발생했습니다. 잠시 후 다시 로그인해주세요.\");\n                }\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"죄송합니다 서버에 일시적인 오류가 발생했습니다. 잠시 후 다시 로그인해주세요.\");\n            })\n    }\n}\n\n","import React from 'react';\n\nfunction Backdrop({ show, clicked }) {\n    return (\n        show ? ( \n            <div \n                style={{backgroundColor: 'rgba(0, 0, 0, .7'}}\n                className=\"w-full h-full z-30 fixed left-0 top-0\" \n                onClick={clicked}\n            /> \n        )\n        : null\n    )\n}\n\nexport default Backdrop;","import React from 'react';\nimport Backdrop from './backdrop';\n\nlet memoizedModal = null;\n\nconst Modal = ({ children, show, clicked }) => {\n    return (\n        <div className=\"w-full\">\n            <Backdrop show={show} clicked={clicked}/>\n            <div className=\"w-full\">\n                <div \n                    style={{\n                        visibility: show ? 'visible' :'hidden',\n                        borderRadius: '10px',\n                        position: \"fixed\",\n                        zIndex: 500,\n                        width: '340px',\n                        textAlign: 'center',\n                        border: '1px solid #ccc',\n                        boxShadow: '1px 1px 1px black',\n                        backgroundColor: 'white',\n                        padding: '36px',\n                        left: `calc(50% - 170px)`,\n                        top: '30%',\n                        boxSizing: 'border-box',\n                        transition: 'all .3s ease-out',\n                        transform: show ? 'scale(1)' : 'scale(0.5)',\n                        opacity: show ? '1' : '0'\n                    }}\n                >\n                    {children}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default memoizedModal = React.memo(Modal);\n"],"sourceRoot":""}